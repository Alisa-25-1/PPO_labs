cmake_minimum_required(VERSION 3.16)
project(PPO_labs)

set(CMAKE_CXX_STANDARD 17)

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# –ü–æ–∏—Å–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
find_package(GTest REQUIRED)
find_package(PkgConfig REQUIRED)

# –ü–æ–∏—Å–∫ libpqxx
pkg_check_modules(LIBPQXX REQUIRED libpqxx)

# –ü–æ–∏—Å–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ uuid –¥–ª—è Linux
if(UNIX AND NOT APPLE)
    find_library(UUID_LIBRARY uuid)
    if(UUID_LIBRARY)
        message(STATUS "Found UUID library: ${UUID_LIBRARY}")
    else()
        message(FATAL_ERROR "UUID library not found. On Ubuntu/Debian, install with: sudo apt-get install uuid-dev")
    endif()
endif()

# –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
set(SOURCE_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/src)

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 1: –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ (—á–∏—Å—Ç—ã–π C++, –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –ë–î)
add_library(BookingCore STATIC
    ${SOURCE_ROOT}/models/TimeSlot.cpp
    ${SOURCE_ROOT}/models/Booking.cpp
    ${SOURCE_ROOT}/models/Client.cpp
    ${SOURCE_ROOT}/models/DanceHall.cpp
    ${SOURCE_ROOT}/models/Branch.cpp
    ${SOURCE_ROOT}/models/Studio.cpp
    ${SOURCE_ROOT}/models/Trainer.cpp
    ${SOURCE_ROOT}/models/Lesson.cpp
    ${SOURCE_ROOT}/models/Enrollment.cpp
    ${SOURCE_ROOT}/models/Review.cpp
    ${SOURCE_ROOT}/models/Subscription.cpp
    ${SOURCE_ROOT}/models/SubscriptionType.cpp
    ${SOURCE_ROOT}/models/Schedule.cpp
    ${SOURCE_ROOT}/types/uuid.cpp
    ${SOURCE_ROOT}/types/enums.cpp
    ${SOURCE_ROOT}/services/BookingService.cpp
    ${SOURCE_ROOT}/services/LessonService.cpp
    ${SOURCE_ROOT}/services/AuthService.cpp
    ${SOURCE_ROOT}/services/SubscriptionService.cpp
    ${SOURCE_ROOT}/services/ReviewService.cpp
    ${SOURCE_ROOT}/services/ScheduleService.cpp
    ${SOURCE_ROOT}/services/EnrollmentService.cpp
    ${SOURCE_ROOT}/dtos/BookingDTO.cpp
    ${SOURCE_ROOT}/dtos/LessonDTO.cpp
    ${SOURCE_ROOT}/dtos/SubscriptionDTO.cpp
    ${SOURCE_ROOT}/dtos/ReviewDTO.cpp
    ${SOURCE_ROOT}/dtos/AuthDTO.cpp
    ${SOURCE_ROOT}/dtos/EnrollmentDTO.cpp
    ${SOURCE_ROOT}/core/Config.cpp
    ${SOURCE_ROOT}/core/Logger.cpp
    ${SOURCE_ROOT}/data/DateTimeUtils.cpp
)

# –î–ª—è Linux –ª–∏–Ω–∫—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É uuid
if(UNIX AND NOT APPLE)
    target_link_libraries(BookingCore PRIVATE ${UUID_LIBRARY})
endif()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º PRIVATE –≤–º–µ—Å—Ç–æ PUBLIC –¥–ª—è include directories
target_include_directories(BookingCore PRIVATE 
    ${SOURCE_ROOT}
)

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 2: –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º
add_library(DataAccess STATIC
    ${SOURCE_ROOT}/data/DatabaseConnection.cpp
    ${SOURCE_ROOT}/data/ResilientDatabaseConnection.cpp
    ${SOURCE_ROOT}/data/QueryFactory.cpp
    ${SOURCE_ROOT}/data/SqlQueryBuilder.cpp
    ${SOURCE_ROOT}/data/PostgreSQLRepositoryFactory.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLClientRepository.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLDanceHallRepository.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLBookingRepository.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLSubscriptionRepository.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLSubscriptionTypeRepository.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLStudioRepository.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLBranchRepository.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLTrainerRepository.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLLessonRepository.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLReviewRepository.cpp
    ${SOURCE_ROOT}/repositories/impl/PostgreSQLEnrollmentRepository.cpp
)

target_include_directories(DataAccess PRIVATE 
    ${SOURCE_ROOT}
)

target_link_libraries(DataAccess PRIVATE BookingCore ${LIBPQXX_LIBRARIES})

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 3: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π UI
add_executable(TechUI
    ${SOURCE_ROOT}/tech_ui/TechUI.cpp
    ${SOURCE_ROOT}/tech_ui/TechUIManagers.cpp
    ${SOURCE_ROOT}/tech_ui/InputHandlers.cpp
    ${SOURCE_ROOT}/main.cpp
)

target_include_directories(TechUI PRIVATE ${SOURCE_ROOT})
target_link_libraries(TechUI PRIVATE BookingCore DataAccess)

# –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Wt - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–µ–π
set(WT_LIBRARIES /usr/local/lib/libwthttp.so /usr/local/lib/libwt.so)
set(WT_INCLUDE_DIRS /usr/local/include)

message(STATUS "Wt libraries: ${WT_LIBRARIES}")
message(STATUS "Wt include dirs: ${WT_INCLUDE_DIRS}")

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 4: Web UI
add_library(WebUIComponent
    ${SOURCE_ROOT}/web_ui/WebApplication.cpp
    ${SOURCE_ROOT}/web_ui/models/UserSession.cpp
    ${SOURCE_ROOT}/web_ui/controllers/AuthController.cpp
    ${SOURCE_ROOT}/web_ui/controllers/BookingController.cpp
    ${SOURCE_ROOT}/web_ui/views/LoginWidget.cpp
    ${SOURCE_ROOT}/web_ui/views/RegistrationWidget.cpp
    ${SOURCE_ROOT}/web_ui/views/ClientDashboard.cpp
    ${SOURCE_ROOT}/web_ui/views/BookingView.cpp
    ${SOURCE_ROOT}/web_ui/views/BookingCreateWidget.cpp
    ${SOURCE_ROOT}/web_ui/views/BookingListWidget.cpp
)

target_include_directories(WebUIComponent PRIVATE 
    ${SOURCE_ROOT}
    ${SOURCE_ROOT}/web_ui
    ${SOURCE_ROOT}/web_ui/controllers
    ${SOURCE_ROOT}/web_ui/models
    ${SOURCE_ROOT}/web_ui/views
)

# –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
add_executable(DanceStudioWebUI
    ${SOURCE_ROOT}/web_main.cpp
)

target_include_directories(DanceStudioWebUI PRIVATE ${SOURCE_ROOT})
target_link_libraries(DanceStudioWebUI 
    WebUIComponent
    BookingCore
    DataAccess
    ${WT_LIBRARIES}
    ${LIBPQXX_LIBRARIES}
    pthread
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é styles –≤ –±–∏–Ω–∞—Ä–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
file(MAKE_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/styles)

# –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ CSS —Ñ–∞–π–ª—ã –≤ –±–∏–Ω–∞—Ä–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
set(CSS_SOURCE_DIR ${SOURCE_ROOT}/web_ui/styles)

# –ö–æ–ø–∏—Ä—É–µ–º main.css –≤ –∫–æ—Ä–µ–Ω—å
#configure_file(
#    ${CSS_SOURCE_DIR}/main.css
#    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/main.css
#    COPYONLY
#)

# –ö–æ–ø–∏—Ä—É–µ–º CSS —Ñ–∞–π–ª—ã –≤ –ø–æ–¥–ø–∞–ø–∫—É styles
file(GLOB CSS_FILES 
    "${CSS_SOURCE_DIR}/main.css"
    "${CSS_SOURCE_DIR}/base.css"
    "${CSS_SOURCE_DIR}/auth.css" 
    "${CSS_SOURCE_DIR}/dashboard.css"
    "${CSS_SOURCE_DIR}/booking.css"
)

foreach(css_file ${CSS_FILES})
    get_filename_component(css_name ${css_file} NAME)
    configure_file(
        ${css_file}
        ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/styles/${css_name}
        COPYONLY
    )
    message(STATUS "üìÅ CSS —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω: styles/${css_name}")
endforeach()

# –£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã)
# install(TARGETS BookingCore DataAccess
#     ARCHIVE DESTINATION lib
#     LIBRARY DESTINATION lib
#     RUNTIME DESTINATION bin
# )

# –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
add_executable(BookingTests
    ${SOURCE_ROOT}/tests/unit/BookingServiceTest.cpp
)

target_include_directories(BookingTests PRIVATE ${SOURCE_ROOT})
target_link_libraries(BookingTests 
    BookingCore 
    GTest::gtest 
    GTest::gtest_main
    GTest::gmock
)

add_executable(AuthServiceTests
    ${SOURCE_ROOT}/tests/unit/AuthServiceTest.cpp
)

target_include_directories(AuthServiceTests PRIVATE ${SOURCE_ROOT})
target_link_libraries(AuthServiceTests 
    BookingCore 
    GTest::gtest 
    GTest::gtest_main
    GTest::gmock
)

add_executable(LessonServiceTests
    ${SOURCE_ROOT}/tests/unit/LessonServiceTest.cpp
)

target_include_directories(LessonServiceTests PRIVATE ${SOURCE_ROOT})
target_link_libraries(LessonServiceTests 
    BookingCore 
    GTest::gtest 
    GTest::gtest_main
    GTest::gmock
)

add_executable(SubscriptionServiceTests
    ${SOURCE_ROOT}/tests/unit/SubscriptionServiceTest.cpp
)

target_include_directories(SubscriptionServiceTests PRIVATE ${SOURCE_ROOT})
target_link_libraries(SubscriptionServiceTests 
    BookingCore 
    GTest::gtest 
    GTest::gtest_main
    GTest::gmock
)

add_executable(ReviewServiceTests
    ${SOURCE_ROOT}/tests/unit/ReviewServiceTest.cpp
)

target_include_directories(ReviewServiceTests PRIVATE ${SOURCE_ROOT})
target_link_libraries(ReviewServiceTests 
    BookingCore 
    GTest::gtest 
    GTest::gtest_main
    GTest::gmock
)

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
add_executable(IntegrationTests
    ${SOURCE_ROOT}/tests/integration/RepositoryIntegrationTests.cpp
)

target_include_directories(IntegrationTests PRIVATE ${SOURCE_ROOT})
target_link_libraries(IntegrationTests 
    BookingCore 
    DataAccess 
    GTest::gtest 
    GTest::gtest_main
    ${LIBPQXX_LIBRARIES}
)