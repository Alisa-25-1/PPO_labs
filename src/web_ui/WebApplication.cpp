#include "WebApplication.hpp"
#include "views/LoginWidget.hpp"
#include "views/ClientDashboard.hpp"
#include "views/RegistrationWidget.hpp"
#include "views/BookingView.hpp"
#include "views/SubscriptionView.hpp"
#include "views/LessonView.hpp"

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
#include "controllers/AuthController.hpp"
#include "controllers/BookingController.hpp"
#include "controllers/SubscriptionController.hpp"

// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
#include "repositories/impl/PostgreSQLBookingRepository.hpp"
#include "repositories/impl/PostgreSQLClientRepository.hpp"
#include "repositories/impl/PostgreSQLDanceHallRepository.hpp"
#include "repositories/impl/PostgreSQLBranchRepository.hpp"
#include "repositories/impl/PostgreSQLSubscriptionRepository.hpp"
#include "repositories/impl/PostgreSQLSubscriptionTypeRepository.hpp"
#include "repositories/impl/PostgreSQLLessonRepository.hpp"
#include "repositories/impl/PostgreSQLTrainerRepository.hpp"
#include "repositories/impl/PostgreSQLEnrollmentRepository.hpp"
#include "repositories/impl/PostgreSQLAttendanceRepository.hpp"

// –°–µ—Ä–≤–∏—Å—ã
#include "services/BookingService.hpp"
#include "services/SubscriptionService.hpp"
#include "services/LessonService.hpp"

// –î–∞–Ω–Ω—ã–µ
#include "data/DatabaseConnection.hpp"

#include <Wt/WPushButton.h>
#include <iostream>

WebApplication::WebApplication(const Wt::WEnvironment& env)
    : WApplication(env),
      mainStack_(nullptr),
      loginView_(nullptr),
      dashboardView_(nullptr),
      registrationView_(nullptr),
      bookingView_(nullptr),
      subscriptionView_(nullptr),
      lessonView_(nullptr) {
    
    setTitle("Dance Studio");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
    initializeControllers();
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    auto container = root()->addNew<Wt::WContainerWidget>();
    container->setStyleClass("app-container");
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–µ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    mainStack_ = container->addNew<Wt::WStackedWidget>();
    mainStack_->setStyleClass("main-stack");
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≤–∏–¥–∂–µ—Ç—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
    loginView_ = mainStack_->addNew<LoginWidget>(this);
    registrationView_ = mainStack_->addNew<RegistrationWidget>(this);
    
    // Dashboard –∏ BookingView —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–π–¥–µ—Ç
    dashboardView_ = nullptr;
    bookingView_ = nullptr;
    subscriptionView_ = nullptr;
    lessonView_ = nullptr;
    
    setupStyles();
    
    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    showLogin();
    
    std::cout << "‚úÖ WebApplication —Å–æ–∑–¥–∞–Ω" << std::endl;
}

void WebApplication::initializeControllers() {
    try {
        std::cout << "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤..." << std::endl;
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        auto connectionString = "postgresql://dance_user:dance_password@localhost/dance_studio";
        auto dbConnection = std::make_shared<DatabaseConnection>(connectionString);
        std::cout << "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å–æ–∑–¥–∞–Ω–æ" << std::endl;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AuthController
        authController_ = std::make_unique<AuthController>();
        std::cout << "‚úÖ AuthController —Å–æ–∑–¥–∞–Ω" << std::endl;
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è BookingService
        auto lessonRepo = std::make_shared<PostgreSQLLessonRepository>(dbConnection);
        auto enrollmentRepo = std::make_shared<PostgreSQLEnrollmentRepository>(dbConnection);
        auto trainerRepo = std::make_shared<PostgreSQLTrainerRepository>(dbConnection);
        auto subscriptionRepo = std::make_shared<PostgreSQLSubscriptionRepository>(dbConnection);
        auto subscriptionTypeRepo = std::make_shared<PostgreSQLSubscriptionTypeRepository>(dbConnection);
        auto bookingRepo = std::make_shared<PostgreSQLBookingRepository>(dbConnection);
        auto clientRepo = std::make_shared<PostgreSQLClientRepository>(dbConnection);
        auto hallRepo = std::make_shared<PostgreSQLDanceHallRepository>(dbConnection);
        auto branchRepo = std::make_shared<PostgreSQLBranchRepository>(dbConnection);
        auto attendanceRepo = std::make_shared<PostgreSQLAttendanceRepository>(dbConnection);
        
        std::cout << "‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:" << std::endl;
        std::cout << "   - BookingRepository: " << (bookingRepo ? "OK" : "NULL") << std::endl;
        std::cout << "   - ClientRepository: " << (clientRepo ? "OK" : "NULL") << std::endl;
        std::cout << "   - DanceHallRepository: " << (hallRepo ? "OK" : "NULL") << std::endl;
        std::cout << "   - BranchRepository: " << (branchRepo ? "OK" : "NULL") << std::endl;

        // –°–æ–∑–¥–∞–µ–º lessonService –∏ enrollmentService —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
        auto lessonService = std::make_shared<LessonService>(lessonRepo, enrollmentRepo, trainerRepo, hallRepo);
        auto enrollmentService = std::make_shared<EnrollmentService>(enrollmentRepo, clientRepo, lessonRepo, attendanceRepo);
        auto branchService = std::make_shared<BranchService>(branchRepo, hallRepo);

        // –°–æ–∑–¥–∞–µ–º lessonController_ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        lessonController_ = std::make_unique<LessonController>(lessonService, enrollmentService, branchService);
        std::cout << "‚úÖ LessonController —Å–æ–∑–¥–∞–Ω" << std::endl;

        // –°–æ–∑–¥–∞–µ–º subscriptionService —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
        auto subscriptionService = std::make_shared<SubscriptionService>(
            subscriptionRepo, subscriptionTypeRepo, clientRepo);

        // –°–æ–∑–¥–∞–µ–º subscriptionController —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
        subscriptionController_ = std::make_unique<SubscriptionController>(subscriptionService);
        std::cout << "‚úÖ SubscriptionController —Å–æ–∑–¥–∞–Ω" << std::endl;
        
        // –°–æ–∑–¥–∞–µ–º BookingService —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
        auto bookingService = std::make_shared<BookingService>(
            bookingRepo, 
            clientRepo, 
            hallRepo, 
            branchRepo,
            branchService,
            attendanceRepo
        );
        std::cout << "‚úÖ BookingService —Å–æ–∑–¥–∞–Ω" << std::endl;
        
        // –°–æ–∑–¥–∞–µ–º BookingController —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
        bookingController_ = std::make_unique<BookingController>(bookingService);
        std::cout << "‚úÖ BookingController —Å–æ–∑–¥–∞–Ω" << std::endl;
        
        std::cout << "‚úÖ –í—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: " << e.what() << std::endl;
        throw;
    }
}

void WebApplication::setupStyles() {
    useStyleSheet("styles/main.css");
}

void WebApplication::loginUser(const AuthResponseDTO& authResponse) {
    try {
        std::cout << "üîê –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << authResponse.name << " (" << authResponse.email << ")" << std::endl;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
        userSession_.login(authResponse.clientId, authResponse.name, 
                          authResponse.email, UserRole::CLIENT);
        
        // –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        if (!dashboardView_) {
            dashboardView_ = mainStack_->addNew<ClientDashboard>(this);
        }
        
        showDashboard();
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << e.what() << std::endl;
        showLogin();
    }
}

void WebApplication::logoutUser() {
    userSession_.logout();
    
    // –û—á–∏—â–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–µ—Å—Å–∏–∏
    dashboardView_ = nullptr;
    bookingView_ = nullptr;
    subscriptionView_ = nullptr;
    lessonView_ = nullptr;
    
    showLogin();
}

void WebApplication::showLogin() {
    std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–Ω" << std::endl;
    mainStack_->setCurrentWidget(loginView_);
}

void WebApplication::showDashboard() {
    if (!dashboardView_) {
        dashboardView_ = mainStack_->addNew<ClientDashboard>(this);
    }
    std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–ª—è: " << userSession_.getUserName() << std::endl;
    mainStack_->setCurrentWidget(dashboardView_);
}

void WebApplication::showRegistration() {
    std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é" << std::endl;
    mainStack_->setCurrentWidget(registrationView_);
}

void WebApplication::showBookingView() {
    try {
        std::cout << "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π..." << std::endl;
        
        if (!bookingView_) {
            std::cout << "üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ BookingView..." << std::endl;
            bookingView_ = mainStack_->addNew<BookingView>(this);
            std::cout << "‚úÖ BookingView —Å–æ–∑–¥–∞–Ω" << std::endl;
        }
        
        std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << userSession_.getUserName() << std::endl;
        mainStack_->setCurrentWidget(bookingView_);
        std::cout << "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BookingView: " << e.what() << std::endl;
        showDashboard();
    }
}

void WebApplication::showSubscriptionView() {
    try {
        std::cout << "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤..." << std::endl;
        
        if (!subscriptionView_) {
            std::cout << "üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SubscriptionView..." << std::endl;
            subscriptionView_ = mainStack_->addNew<SubscriptionView>(this);
            std::cout << "‚úÖ SubscriptionView —Å–æ–∑–¥–∞–Ω" << std::endl;
        }
        
        std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–±–æ–Ω–µ–º–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << userSession_.getUserName() << std::endl;
        mainStack_->setCurrentWidget(subscriptionView_);
        std::cout << "‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BookingView: " << e.what() << std::endl;
        showDashboard();
    }
}

void WebApplication::showLessonView() {
    try {
        std::cout << "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∑–∞–Ω—è—Ç–∏–π..." << std::endl;
        
        if (!lessonView_) {
            std::cout << "üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ LessonView..." << std::endl;
            lessonView_ = mainStack_->addNew<LessonView>(this);
            std::cout << "‚úÖ LessonView —Å–æ–∑–¥–∞–Ω" << std::endl;
        }
        
        std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << userSession_.getUserName() << std::endl;
        mainStack_->setCurrentWidget(lessonView_);
        std::cout << "‚úÖ –ó–∞–Ω—è—Ç–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ LessonView: " << e.what() << std::endl;
        showDashboard();
    }
}