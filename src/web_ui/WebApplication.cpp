#include "WebApplication.hpp"
#include "views/LoginWidget.hpp"
#include "views/ClientDashboard.hpp"
#include "views/RegistrationWidget.hpp"
#include "views/BookingView.hpp"
#include "views/SubscriptionView.hpp"
#include "views/LessonView.hpp"

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
#include "controllers/AuthController.hpp"
#include "controllers/BookingController.hpp"
#include "controllers/SubscriptionController.hpp"

// –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
#include "repositories/impl/PostgreSQLBookingRepository.hpp"
#include "repositories/impl/PostgreSQLClientRepository.hpp"
#include "repositories/impl/PostgreSQLDanceHallRepository.hpp"
#include "repositories/impl/PostgreSQLBranchRepository.hpp"
#include "repositories/impl/PostgreSQLSubscriptionRepository.hpp"
#include "repositories/impl/PostgreSQLSubscriptionTypeRepository.hpp"
#include "repositories/impl/PostgreSQLLessonRepository.hpp"
#include "repositories/impl/PostgreSQLTrainerRepository.hpp"
#include "repositories/impl/PostgreSQLEnrollmentRepository.hpp"
#include "repositories/impl/PostgreSQLAttendanceRepository.hpp"

// –°–µ—Ä–≤–∏—Å—ã
#include "services/BookingService.hpp"
#include "services/SubscriptionService.hpp"
#include "services/LessonService.hpp"
#include "services/BranchService.hpp"
#include "services/EnrollmentService.hpp"

// –î–∞–Ω–Ω—ã–µ
#include "data/ResilientDatabaseConnection.hpp"  
#include "services/DatabaseHealthService.hpp"

#include <Wt/WPushButton.h>
#include <iostream>

WebApplication::WebApplication(const Wt::WEnvironment& env)
    : WApplication(env),
      mainStack_(nullptr),
      loginView_(nullptr),
      dashboardView_(nullptr),
      registrationView_(nullptr),
      bookingView_(nullptr),
      subscriptionView_(nullptr),
      lessonView_(nullptr) {
    
    setTitle("Dance Studio");
    
    initializeControllers();
    
    auto container = root()->addNew<Wt::WContainerWidget>();
    container->setStyleClass("app-container");
    
    mainStack_ = container->addNew<Wt::WStackedWidget>();
    mainStack_->setStyleClass("main-stack");
    
    loginView_ = mainStack_->addNew<LoginWidget>(this);
    registrationView_ = mainStack_->addNew<RegistrationWidget>(this);
    
    dashboardView_ = nullptr;
    bookingView_ = nullptr;
    subscriptionView_ = nullptr;
    lessonView_ = nullptr;
    
    setupStyles();
    
    showLogin();
    
    std::cout << "‚úÖ WebApplication —Å–æ–∑–¥–∞–Ω" << std::endl;
}

void WebApplication::handleDatabaseError(const std::string& context) {
    std::cerr << "‚ùå Database error in " << context << std::endl;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    auto errorContainer = root()->addNew<Wt::WContainerWidget>();
    errorContainer->setStyleClass("error-container");
    
    errorContainer->addNew<Wt::WText>(
        "<div style='text-align: center; padding: 2rem;'>"
        "<h2>üòî –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏</h2>"
        "<p>–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>"
        "<p><small>–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã</small></p>"
        "</div>"
    )->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (mainStack_) {
        mainStack_->hide();
    }
}

void WebApplication::initializeControllers() {
    try {
        std::cout << "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤..." << std::endl;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        if (!DatabaseHealthService::isDatabaseHealthy()) {
            throw std::runtime_error("Database is currently unavailable");
        }
        
        auto connectionString = "postgresql://dance_user:dance_password@localhost/dance_studio";
        auto dbConnection = std::make_shared<ResilientDatabaseConnection>(connectionString); 
        std::cout << "‚úÖ –£—Å—Ç–æ–π—á–∏–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å–æ–∑–¥–∞–Ω–æ" << std::endl;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AuthController
        authController_ = std::make_unique<AuthController>();
        std::cout << "‚úÖ AuthController —Å–æ–∑–¥–∞–Ω" << std::endl;
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è Services
        auto lessonRepo = std::make_shared<PostgreSQLLessonRepository>(dbConnection);
        auto enrollmentRepo = std::make_shared<PostgreSQLEnrollmentRepository>(dbConnection);
        auto trainerRepo = std::make_shared<PostgreSQLTrainerRepository>(dbConnection);
        auto subscriptionRepo = std::make_shared<PostgreSQLSubscriptionRepository>(dbConnection);
        auto subscriptionTypeRepo = std::make_shared<PostgreSQLSubscriptionTypeRepository>(dbConnection);
        auto bookingRepo = std::make_shared<PostgreSQLBookingRepository>(dbConnection);
        auto clientRepo = std::make_shared<PostgreSQLClientRepository>(dbConnection);
        auto hallRepo = std::make_shared<PostgreSQLDanceHallRepository>(dbConnection);
        auto branchRepo = std::make_shared<PostgreSQLBranchRepository>(dbConnection);
        auto attendanceRepo = std::make_shared<PostgreSQLAttendanceRepository>(dbConnection);

        auto branchService = std::make_shared<BranchService>(branchRepo, hallRepo);
        auto lessonService = std::make_shared<LessonService>(lessonRepo, enrollmentRepo, trainerRepo, hallRepo);
        auto enrollmentService = std::make_shared<EnrollmentService>(enrollmentRepo, clientRepo, lessonRepo, attendanceRepo);

        lessonController_ = std::make_unique<LessonController>(lessonService, enrollmentService, branchService);
        std::cout << "‚úÖ LessonController —Å–æ–∑–¥–∞–Ω" << std::endl;

        auto subscriptionService = std::make_shared<SubscriptionService>(
            subscriptionRepo, subscriptionTypeRepo, clientRepo);

        subscriptionController_ = std::make_unique<SubscriptionController>(subscriptionService);
        std::cout << "‚úÖ SubscriptionController —Å–æ–∑–¥–∞–Ω" << std::endl;
        
        auto bookingService = std::make_shared<BookingService>(
            bookingRepo, 
            clientRepo, 
            hallRepo, 
            branchRepo,
            branchService,
            attendanceRepo,
            lessonRepo
        );
        std::cout << "‚úÖ BookingService —Å–æ–∑–¥–∞–Ω" << std::endl;
        
        bookingController_ = std::make_unique<BookingController>(bookingService);
        std::cout << "‚úÖ BookingController —Å–æ–∑–¥–∞–Ω" << std::endl;
        
        std::cout << "‚úÖ –í—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤: " << e.what() << std::endl;
        handleDatabaseError("initializeControllers");
        throw;
    }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
void WebApplication::setupStyles() {
    useStyleSheet("styles/main.css");
}

void WebApplication::loginUser(const AuthResponseDTO& authResponse) {
    try {
        std::cout << "üîê –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << authResponse.name << " (" << authResponse.email << ")" << std::endl;
    
        userSession_.login(authResponse.clientId, authResponse.name, 
                          authResponse.email, UserRole::CLIENT);

        if (!dashboardView_) {
            dashboardView_ = mainStack_->addNew<ClientDashboard>(this);
        }
        
        showDashboard();
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << e.what() << std::endl;
        showLogin();
    }
}

void WebApplication::logoutUser() {
    userSession_.logout();
    
    dashboardView_ = nullptr;
    bookingView_ = nullptr;
    subscriptionView_ = nullptr;
    lessonView_ = nullptr;
    
    showLogin();
}

void WebApplication::showLogin() {
    std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–Ω" << std::endl;
    mainStack_->setCurrentWidget(loginView_);
}

void WebApplication::showDashboard() {
    if (!dashboardView_) {
        dashboardView_ = mainStack_->addNew<ClientDashboard>(this);
    }
    std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–ª—è: " << userSession_.getUserName() << std::endl;
    mainStack_->setCurrentWidget(dashboardView_);
}

void WebApplication::showRegistration() {
    std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é" << std::endl;
    mainStack_->setCurrentWidget(registrationView_);
}

void WebApplication::showBookingView() {
    try {
        std::cout << "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π..." << std::endl;
        
        if (!bookingView_) {
            std::cout << "üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ BookingView..." << std::endl;
            bookingView_ = mainStack_->addNew<BookingView>(this);
            std::cout << "‚úÖ BookingView —Å–æ–∑–¥–∞–Ω" << std::endl;
        }
        
        std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << userSession_.getUserName() << std::endl;
        mainStack_->setCurrentWidget(bookingView_);
        std::cout << "‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BookingView: " << e.what() << std::endl;
        handleDatabaseError("showBookingView");
    }
}

void WebApplication::showSubscriptionView() {
    try {
        std::cout << "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤..." << std::endl;
        
        if (!subscriptionView_) {
            std::cout << "üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SubscriptionView..." << std::endl;
            subscriptionView_ = mainStack_->addNew<SubscriptionView>(this);
            std::cout << "‚úÖ SubscriptionView —Å–æ–∑–¥–∞–Ω" << std::endl;
        }
        
        std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–±–æ–Ω–µ–º–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << userSession_.getUserName() << std::endl;
        mainStack_->setCurrentWidget(subscriptionView_);
        std::cout << "‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BookingView: " << e.what() << std::endl;
        handleDatabaseError("showSubscriptionView");
    }
}

void WebApplication::showLessonView() {
    try {
        std::cout << "üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∑–∞–Ω—è—Ç–∏–π..." << std::endl;
        
        if (!lessonView_) {
            std::cout << "üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ LessonView..." << std::endl;
            lessonView_ = mainStack_->addNew<LessonView>(this);
            std::cout << "‚úÖ LessonView —Å–æ–∑–¥–∞–Ω" << std::endl;
        }
        
        std::cout << "üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << userSession_.getUserName() << std::endl;
        mainStack_->setCurrentWidget(lessonView_);
        std::cout << "‚úÖ –ó–∞–Ω—è—Ç–∏—è –ø–æ–∫–∞–∑–∞–Ω—ã" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ LessonView: " << e.what() << std::endl;
        handleDatabaseError("showLessonView");
    }
}