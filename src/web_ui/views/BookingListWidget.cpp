#include "BookingListWidget.hpp"
#include "../WebApplication.hpp"
#include <Wt/WTimer.h>
#include <iostream>

BookingListWidget::BookingListWidget(WebApplication* app) 
    : app_(app) {
    setupUI();
}

void BookingListWidget::setupUI() {
    setStyleClass("booking-list-widget");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("booking-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("booking-card-header");
    auto headerText = header->addNew<Wt::WText>("<h2>üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h2>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –¢–∞–±–ª–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    auto content = card->addNew<Wt::WContainerWidget>();
    content->setStyleClass("booking-list-content");
    
    bookingsTable_ = content->addNew<Wt::WTable>();
    bookingsTable_->setStyleClass("booking-table");
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = content->addNew<Wt::WText>();
    statusText_->setStyleClass("booking-status");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    loadBookings();
}

void BookingListWidget::loadBookings() {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        bookingsTable_->clear();
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        bookingsTable_->elementAt(0, 0)->addNew<Wt::WText>("<strong>ID</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        bookingsTable_->elementAt(0, 1)->addNew<Wt::WText>("<strong>–ó–∞–ª</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        bookingsTable_->elementAt(0, 2)->addNew<Wt::WText>("<strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        bookingsTable_->elementAt(0, 3)->addNew<Wt::WText>("<strong>–¶–µ–ª—å</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        bookingsTable_->elementAt(0, 4)->addNew<Wt::WText>("<strong>–°—Ç–∞—Ç—É—Å</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        bookingsTable_->elementAt(0, 5)->addNew<Wt::WText>("<strong>–î–µ–π—Å—Ç–≤–∏—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        // –ó–∞–≥–ª—É—à–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        int row = 1;
        
        // –¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 1
        bookingsTable_->elementAt(row, 0)->addNew<Wt::WText>("BKG-001");
        bookingsTable_->elementAt(row, 1)->addNew<Wt::WText>("üèüÔ∏è –ó–∞–ª 1");
        bookingsTable_->elementAt(row, 2)->addNew<Wt::WText>("15.12.2023 10:00-11:00");
        bookingsTable_->elementAt(row, 3)->addNew<Wt::WText>("–†–µ–ø–µ—Ç–∏—Ü–∏—è —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã");
        bookingsTable_->elementAt(row, 4)->addNew<Wt::WText>("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ");
        
        auto cancelBtn1 = bookingsTable_->elementAt(row, 5)->addNew<Wt::WPushButton>("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
        cancelBtn1->setStyleClass("btn-cancel-small");
        cancelBtn1->clicked().connect([this]() {
            handleCancelBooking();
        });
        
        row++;
        
        // –¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 2
        bookingsTable_->elementAt(row, 0)->addNew<Wt::WText>("BKG-002");
        bookingsTable_->elementAt(row, 1)->addNew<Wt::WText>("üèüÔ∏è –ó–∞–ª 2");
        bookingsTable_->elementAt(row, 2)->addNew<Wt::WText>("16.12.2023 14:00-16:00");
        bookingsTable_->elementAt(row, 3)->addNew<Wt::WText>("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞");
        bookingsTable_->elementAt(row, 4)->addNew<Wt::WText>("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ");
        
        auto cancelBtn2 = bookingsTable_->elementAt(row, 5)->addNew<Wt::WPushButton>("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
        cancelBtn2->setStyleClass("btn-cancel-small");
        cancelBtn2->clicked().connect([this]() {
            handleCancelBooking();
        });
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: " + std::string(e.what()), true);
    }
}

void BookingListWidget::handleCancelBooking() {
    try {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        updateStatus("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ! (–∑–∞–≥–ª—É—à–∫–∞)", false);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        auto timer = std::make_shared<Wt::WTimer>();
        timer->setSingleShot(true);
        timer->setInterval(std::chrono::seconds(1));
        timer->timeout().connect([this, timer]() {
            loadBookings();
        });
        timer->start();
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " + std::string(e.what()), true);
    }
}

void BookingListWidget::updateStatus(const std::string& message, bool isError) {
    statusText_->setText(message);
    if (isError) {
        statusText_->removeStyleClass("status-success");
        statusText_->addStyleClass("status-error");
    } else {
        statusText_->removeStyleClass("status-error");
        statusText_->addStyleClass("status-success");
    }
}