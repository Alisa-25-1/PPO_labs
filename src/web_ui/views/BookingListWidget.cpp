#include "BookingListWidget.hpp"
#include "../WebApplication.hpp"
#include <Wt/WTimer.h>
#include <Wt/WMessageBox.h>
#include <iostream>
#include <iomanip>
#include <sstream>

BookingListWidget::BookingListWidget(WebApplication* app) 
    : app_(app),
      bookingsTable_(nullptr),
      statusText_(nullptr) {
    
    std::cout << "üîß –°–æ–∑–¥–∞–Ω–∏–µ BookingListWidget..." << std::endl;
    setupUI();
    std::cout << "‚úÖ BookingListWidget —Å–æ–∑–¥–∞–Ω" << std::endl;
}

void BookingListWidget::setupUI() {
    std::cout << "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI BookingListWidget..." << std::endl;
    
    setStyleClass("booking-list-widget");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("booking-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("booking-card-header");
    auto headerText = header->addNew<Wt::WText>("<h2>üìã –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h2>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    auto refreshBtn = header->addNew<Wt::WPushButton>("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
    refreshBtn->setStyleClass("btn-refresh");
    refreshBtn->clicked().connect([this]() {
        loadBookings();
    });
    
    // –¢–∞–±–ª–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    auto content = card->addNew<Wt::WContainerWidget>();
    content->setStyleClass("booking-list-content");
    
    bookingsTable_ = content->addNew<Wt::WTable>();
    bookingsTable_->setStyleClass("booking-table");
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = content->addNew<Wt::WText>();
    statusText_->setStyleClass("booking-status");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    loadBookings();
    
    std::cout << "‚úÖ UI BookingListWidget –Ω–∞—Å—Ç—Ä–æ–µ–Ω" << std::endl;
}

void BookingListWidget::loadBookings() {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        bookingsTable_->clear();
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        bookingsTable_->elementAt(0, 0)->addNew<Wt::WText>("<strong>–ó–∞–ª</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        bookingsTable_->elementAt(0, 1)->addNew<Wt::WText>("<strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        bookingsTable_->elementAt(0, 2)->addNew<Wt::WText>("<strong>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        bookingsTable_->elementAt(0, 3)->addNew<Wt::WText>("<strong>–¶–µ–ª—å</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        bookingsTable_->elementAt(0, 4)->addNew<Wt::WText>("<strong>–°—Ç–∞—Ç—É—Å</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        bookingsTable_->elementAt(0, 5)->addNew<Wt::WText>("<strong>–î–µ–π—Å—Ç–≤–∏—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        bookingsTable_->setWidth("100%");
        
        // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auto bookings = getClientBookingsFromService();
        
        if (bookings.empty()) {
            auto noBookingsRow = bookingsTable_->elementAt(1, 0);
            noBookingsRow->setColumnSpan(6);
            noBookingsRow->addNew<Wt::WText>("<div style='text-align: center; padding: 2rem; color: #6c757d;'>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</div>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
            return;
        }
        
        int row = 1;
        for (const auto& booking : bookings) {
            // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞ (—É–±–∏—Ä–∞–µ–º ID)
            std::string hallName = getHallNameById(booking.hallId);
            auto hallCell = bookingsTable_->elementAt(row, 0)->addNew<Wt::WText>(hallName);
            hallCell->setStyleClass("cell-hall-name");
            
            // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            std::string datetimeStr = formatDateTime(booking.timeSlot.getStartTime(), booking.hallId);
            bookingsTable_->elementAt(row, 1)->addNew<Wt::WText>(datetimeStr);
            
            // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            std::string durationStr = std::to_string(booking.timeSlot.getDurationMinutes() / 60) + " —á";
            bookingsTable_->elementAt(row, 2)->addNew<Wt::WText>(durationStr);
            
            // –¶–µ–ª—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã
            std::string purpose = booking.purpose;
            if (purpose.length() > 30) {
                purpose = purpose.substr(0, 27) + "...";
            }
            auto purposeText = bookingsTable_->elementAt(row, 3)->addNew<Wt::WText>(purpose);
            purposeText->setToolTip(booking.purpose); // –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç—É–ª—Ç–∏–ø–µ
            purposeText->setStyleClass("cell-purpose");
            
            // –°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
            auto statusCell = bookingsTable_->elementAt(row, 4);
            auto statusText = statusCell->addNew<Wt::WText>(getStatusDisplayName(booking.status));
            statusCell->setStyleClass(getStatusStyleClass(booking.status));
            
            // –î–µ–π—Å—Ç–≤–∏—è - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            auto actionsCell = bookingsTable_->elementAt(row, 5);
            actionsCell->setStyleClass("cell-actions");
            
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            if (booking.status == "CONFIRMED" || booking.status == "PENDING") {
                auto cancelBtn = actionsCell->addNew<Wt::WPushButton>("‚ùå");
                cancelBtn->setStyleClass("btn-cancel-compact");
                cancelBtn->setToolTip("–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ");
                cancelBtn->clicked().connect([this, booking]() {
                    handleCancelBooking(booking.bookingId);
                });
            } else {
                actionsCell->addNew<Wt::WText>("‚Äî");
            }
            
            row++;
        }
        
        updateStatus("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: " + std::to_string(bookings.size()), false);
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: " + std::string(e.what()), true);
    }
}

// –î–æ–±–∞–≤—å—Ç–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
std::string BookingListWidget::getStatusDisplayName(const std::string& status) {
    static std::map<std::string, std::string> statusMap = {
        {"CONFIRMED", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"},
        {"PENDING", "–û–∂–∏–¥–∞–Ω–∏–µ"},
        {"CANCELLED", "–û—Ç–º–µ–Ω–µ–Ω–æ"},
        {"COMPLETED", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"}
    };
    
    auto it = statusMap.find(status);
    return it != statusMap.end() ? it->second : status;
}

std::string BookingListWidget::getStatusStyleClass(const std::string& status) {
    static std::map<std::string, std::string> styleMap = {
        {"CONFIRMED", "status-confirmed"},
        {"PENDING", "status-pending"},
        {"CANCELLED", "status-cancelled"},
        {"COMPLETED", "status-completed"}
    };
    
    auto it = styleMap.find(status);
    return it != styleMap.end() ? it->second : "";
}

void BookingListWidget::handleCancelBooking(const UUID& bookingId) {
    try {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ MessageBox
        auto dialog = addNew<Wt::WDialog>("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã");
        dialog->setModal(true);
        dialog->setStyleClass("cancel-dialog");
        
        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–∞
        auto content = dialog->contents()->addNew<Wt::WContainerWidget>();
        content->setStyleClass("dialog-content");
        
        // –ò–∫–æ–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç
        auto icon = content->addNew<Wt::WText>("<div style='text-align: center; font-size: 3rem; margin-bottom: 1rem;'>‚ö†Ô∏è</div>");
        icon->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        auto message = content->addNew<Wt::WText>(
            "<h3 style='text-align: center; margin-bottom: 1rem;'>–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h3>"
            "<p style='text-align: center; color: #666;'>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?</p>"
        );
        message->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        // –ö–Ω–æ–ø–∫–∏
        auto buttonContainer = dialog->footer()->addNew<Wt::WContainerWidget>();
        buttonContainer->setStyleClass("dialog-buttons");
        
        auto cancelBtn = buttonContainer->addNew<Wt::WPushButton>("–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å");
        cancelBtn->setStyleClass("btn-dialog-secondary");
        cancelBtn->clicked().connect([dialog]() {
            dialog->reject();
        });
        
        auto confirmBtn = buttonContainer->addNew<Wt::WPushButton>("–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å");
        confirmBtn->setStyleClass("btn-dialog-primary");
        confirmBtn->clicked().connect([this, dialog, bookingId]() {
            dialog->accept();
            performCancelBooking(bookingId);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        dialog->finished().connect([this, dialog](Wt::DialogCode code) {
            removeChild(dialog);
        });
        
        dialog->show();
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " + std::string(e.what()), true);
    }
}

void BookingListWidget::performCancelBooking(const UUID& bookingId) {
    try {
        // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        bool success = cancelBookingThroughService(bookingId);
        
        if (success) {
            updateStatus("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!", false);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            auto timer = std::make_shared<Wt::WTimer>();
            timer->setSingleShot(true);
            timer->setInterval(std::chrono::seconds(1));
            timer->timeout().connect([this, timer]() {
                loadBookings();
            });
            timer->start();
        } else {
            updateStatus("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", true);
        }
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " + std::string(e.what()), true);
    }
}

void BookingListWidget::updateStatus(const std::string& message, bool isError) {
    statusText_->setText(message);
    if (isError) {
        statusText_->removeStyleClass("status-success");
        statusText_->addStyleClass("status-error");
    } else {
        statusText_->removeStyleClass("status-error");
        statusText_->addStyleClass("status-success");
    }
}

std::vector<BookingResponseDTO> BookingListWidget::getClientBookingsFromService() {
    try {
        return app_->getBookingController()->getClientBookings(getCurrentClientId());
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: " << e.what() << std::endl;
        return {};
    }
}

bool BookingListWidget::cancelBookingThroughService(const UUID& bookingId) {
    try {
        auto response = app_->getBookingController()->cancelBooking(bookingId, getCurrentClientId());
        return response.status == "CANCELLED";
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " << e.what() << std::endl;
        return false;
    }
}

UUID BookingListWidget::getCurrentClientId() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
    return app_->getCurrentClientId();
}

std::string BookingListWidget::getHallNameById(const UUID& hallId) {
    try {
        return app_->getBookingController()->getHallName(hallId);
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–ª–∞: " << e.what() << std::endl;
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ª";
    }
}

std::string BookingListWidget::formatDateTime(const std::chrono::system_clock::time_point& timePoint, const UUID& hallId) {
    try {
        auto offset = app_->getBookingController()->getTimezoneOffsetForHall(hallId);
        return DateTimeUtils::formatDateTimeWithOffset(timePoint, offset);
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –∑–∞–ª–∞: " << e.what() << std::endl;
        return DateTimeUtils::formatDateTime(timePoint);
    }
}