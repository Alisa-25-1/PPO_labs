#include "LessonScheduleWidget.hpp"
#include "../WebApplication.hpp"
#include "../../data/DateTimeUtils.hpp"
#include <Wt/WBreak.h>
#include <iostream>
#include <iomanip>
#include <sstream>

LessonScheduleWidget::LessonScheduleWidget(WebApplication* app) 
    : app_(app),
      branchComboBox_(nullptr),
      dateEdit_(nullptr),
      searchButton_(nullptr),
      lessonsTable_(nullptr),
      statusText_(nullptr) {
    
    setupUI();
}

void LessonScheduleWidget::setupUI() {
    setStyleClass("lesson-schedule-widget");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("lesson-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("lesson-card-header");
    auto headerText = header->addNew<Wt::WText>("<h2>üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ</h2>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ - –î–û–ë–ê–í–õ–ï–ù–û –û–ë–™–Ø–í–õ–ï–ù–ò–ï –ü–ï–†–ï–ú–ï–ù–ù–û–ô
    auto form = card->addNew<Wt::WContainerWidget>();
    form->setStyleClass("lesson-search-form");
    
    // –í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
    auto branchGroup = form->addNew<Wt::WContainerWidget>();
    branchGroup->setStyleClass("form-group");
    
    auto branchLabel = branchGroup->addNew<Wt::WText>("<label class='form-label'>üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª</label>");
    branchLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    branchComboBox_ = branchGroup->addNew<Wt::WComboBox>();
    branchComboBox_->setStyleClass("form-input");
    
    // –î–∞—Ç–∞
    auto dateGroup = form->addNew<Wt::WContainerWidget>();
    dateGroup->setStyleClass("form-group");
    
    auto dateLabel = dateGroup->addNew<Wt::WText>("<label class='form-label'>üìÖ –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏–π</label>");
    dateLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    dateEdit_ = dateGroup->addNew<Wt::WDateEdit>();
    dateEdit_->setStyleClass("form-input");
    dateEdit_->setDate(Wt::WDate::currentDate());
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ
    Wt::WDate maxDate = Wt::WDate::currentDate().addDays(30);
    dateEdit_->setTop(maxDate);
    dateEdit_->setBottom(Wt::WDate::currentDate());
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
    auto buttonGroup = form->addNew<Wt::WContainerWidget>();
    buttonGroup->setStyleClass("lesson-button-group");
    
    searchButton_ = buttonGroup->addNew<Wt::WPushButton>("üîç –ù–∞–π—Ç–∏ –∑–∞–Ω—è—Ç–∏—è");
    searchButton_->setStyleClass("btn-lesson-search");
    searchButton_->clicked().connect(this, &LessonScheduleWidget::handleSearch);
    
    // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–Ω—è—Ç–∏–π
    auto content = card->addNew<Wt::WContainerWidget>();
    content->setStyleClass("lesson-list-content");
    
    lessonsTable_ = content->addNew<Wt::WTable>();
    lessonsTable_->setStyleClass("lesson-table");
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = content->addNew<Wt::WText>();
    statusText_->setStyleClass("lesson-status");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª–∏–∞–ª—ã
    loadBranches();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    handleSearch();
}

void LessonScheduleWidget::handleSearch() {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        lessonsTable_->clear();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ñ–∏–ª–∏–∞–ª
        if (branchComboBox_->currentIndex() <= 0) {
            updateStatus("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª", true);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ –Ω–∞—à–µ–≥–æ mapping
        int selectedIndex = branchComboBox_->currentIndex();
        auto it = branchIdMap_.find(selectedIndex);
        if (it == branchIdMap_.end()) {
            updateStatus("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞", true);
            return;
        }
        
        UUID branchId = it->second;
        Wt::WDate selectedDate = dateEdit_->date();

        // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Ñ–∏–ª–∏–∞–ª–∞
        auto branchTimezoneOffset = app_->getLessonController()->getTimezoneOffsetForBranch(branchId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
        auto allLessons = app_->getLessonController()->getLessonsByBranch(branchId);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        std::vector<LessonResponseDTO> filteredLessons;
        auto selectedTimePoint = DateTimeUtils::createDateTime(
            selectedDate.year(), selectedDate.month(), selectedDate.day(), 0, 0, 0
        );
        
        for (const auto& lesson : allLessons) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
            if (DateTimeUtils::isSameDay(lesson.timeSlot.getStartTime(), selectedTimePoint) &&
                lesson.timeSlot.getStartTime() > std::chrono::system_clock::now()) {
                filteredLessons.push_back(lesson);
            }
        }
        
        if (filteredLessons.empty()) {
            updateStatus("‚ÑπÔ∏è –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π", false);
            return;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        std::sort(filteredLessons.begin(), filteredLessons.end(),
            [](const LessonResponseDTO& a, const LessonResponseDTO& b) {
                return a.timeSlot.getStartTime() < b.timeSlot.getStartTime();
            });
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        lessonsTable_->elementAt(0, 0)->addNew<Wt::WText>("<strong>–ó–∞–Ω—è—Ç–∏–µ</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        lessonsTable_->elementAt(0, 1)->addNew<Wt::WText>("<strong>–í—Ä–µ–º—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        lessonsTable_->elementAt(0, 2)->addNew<Wt::WText>("<strong>–¢–∏–ø</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        lessonsTable_->elementAt(0, 3)->addNew<Wt::WText>("<strong>–£—Ä–æ–≤–µ–Ω—å</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        lessonsTable_->elementAt(0, 4)->addNew<Wt::WText>("<strong>–ú–µ—Å—Ç–∞</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        lessonsTable_->elementAt(0, 5)->addNew<Wt::WText>("<strong>–¶–µ–Ω–∞</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        lessonsTable_->elementAt(0, 6)->addNew<Wt::WText>("<strong>–î–µ–π—Å—Ç–≤–∏—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        int row = 1;
        UUID currentClientId = app_->getCurrentClientId();
        
        for (const auto& lesson : filteredLessons) {
            // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
            auto nameCell = lessonsTable_->elementAt(row, 0);
            nameCell->addNew<Wt::WText>(lesson.name);
            nameCell->setStyleClass("cell-lesson-name");
            
            // –í—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ —Ñ–∏–ª–∏–∞–ª–∞
            std::string timeStr = DateTimeUtils::formatTimeSlotWithOffset(
                lesson.timeSlot.getStartTime(), 
                lesson.timeSlot.getDurationMinutes(),
                branchTimezoneOffset
            );
            lessonsTable_->elementAt(row, 1)->addNew<Wt::WText>(timeStr);
            
            // –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è
            std::string typeStr;
            switch (lesson.type) {
                case LessonType::OPEN_CLASS: typeStr = "–û—Ç–∫—Ä—ã—Ç—ã–π –∫–ª–∞—Å—Å"; break;
                case LessonType::SPECIAL_COURSE: typeStr = "–ö—É—Ä—Å"; break;
                case LessonType::INDIVIDUAL: typeStr = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ"; break;
                case LessonType::MASTERCLASS: typeStr = "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å"; break;
                default: typeStr = "–ó–∞–Ω—è—Ç–∏–µ";
            }
            lessonsTable_->elementAt(row, 2)->addNew<Wt::WText>(typeStr);
            
            // –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            std::string levelStr;
            switch (lesson.difficulty) {
                case DifficultyLevel::BEGINNER: levelStr = "–ù–∞—á–∏–Ω–∞—é—â–∏–π"; break;
                case DifficultyLevel::INTERMEDIATE: levelStr = "–°—Ä–µ–¥–Ω–∏–π"; break;
                case DifficultyLevel::ADVANCED: levelStr = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"; break;
                case DifficultyLevel::ALL_LEVELS: levelStr = "–í—Å–µ —É—Ä–æ–≤–Ω–∏"; break;
                default: levelStr = "–ù–∞—á–∏–Ω–∞—é—â–∏–π";
            }
            lessonsTable_->elementAt(row, 3)->addNew<Wt::WText>(levelStr);
            
            // –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
            int freeSpots = lesson.maxParticipants - lesson.currentParticipants;
            std::string spotsStr = std::to_string(freeSpots) + "/" + std::to_string(lesson.maxParticipants);
            auto spotsCell = lessonsTable_->elementAt(row, 4);
            spotsCell->addNew<Wt::WText>(spotsStr);
            if (freeSpots <= 0) {
                spotsCell->setStyleClass("cell-no-spots");
            } else if (freeSpots <= 3) {
                spotsCell->setStyleClass("cell-few-spots");
            }
            
            // –¶–µ–Ω–∞
            std::string priceStr = std::to_string(static_cast<int>(lesson.price)) + " —Ä—É–±.";
            lessonsTable_->elementAt(row, 5)->addNew<Wt::WText>(priceStr);
            
            // –î–µ–π—Å—Ç–≤–∏—è
            auto actionsCell = lessonsTable_->elementAt(row, 6);
            actionsCell->setStyleClass("cell-actions");
            
            bool canEnroll = app_->getLessonController()->canClientEnroll(currentClientId, lesson.lessonId);
            
            if (canEnroll && freeSpots > 0) {
                auto enrollBtn = actionsCell->addNew<Wt::WPushButton>("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è");
                enrollBtn->setStyleClass("btn-enroll");
                enrollBtn->clicked().connect([this, lesson]() {
                    handleEnroll(lesson.lessonId);
                });
            } else if (freeSpots <= 0) {
                actionsCell->addNew<Wt::WText>("‚ùå –ù–µ—Ç –º–µ—Å—Ç");
            } else {
                actionsCell->addNew<Wt::WText>("‚úÖ –ó–∞–ø–∏—Å–∞–Ω");
            }
            
            row++;
        }
        
        std::string statusMessage = "‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ " + 
                                   selectedDate.toString("dd.MM.yyyy").toUTF8() + 
                                   ": " + std::to_string(filteredLessons.size());
        updateStatus(statusMessage, false);
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π: " + std::string(e.what()), true);
    }
}

void LessonScheduleWidget::handleEnroll(const UUID& lessonId) {
    try {
        UUID clientId = app_->getCurrentClientId();
        auto response = app_->getLessonController()->enrollInLesson(clientId, lessonId);
        
        updateStatus("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!", false);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        handleSearch();
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ: " + std::string(e.what()), true);
    }
}

void LessonScheduleWidget::updateStatus(const std::string& message, bool isError) {
    statusText_->setText(message);
    if (isError) {
        statusText_->removeStyleClass("status-success");
        statusText_->addStyleClass("status-error");
    } else {
        statusText_->removeStyleClass("status-error");
        statusText_->addStyleClass("status-success");
    }
}

void LessonScheduleWidget::loadBranches() {
    try {
        branches_ = app_->getLessonController()->getBranches();
        
        branchComboBox_->clear();
        branchComboBox_->addItem("-- –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª --");
        branchIdMap_.clear();
        
        for (size_t i = 0; i < branches_.size(); ++i) {
            const auto& branch = branches_[i];
            int index = branchComboBox_->count(); // –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            branchComboBox_->addItem(branch.getName());
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º mapping –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å–æ–º –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ –∏ UUID —Ñ–∏–ª–∏–∞–ª–∞
            branchIdMap_[index] = branch.getId();
        }
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤", true);
    }
}