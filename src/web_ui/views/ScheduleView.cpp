#include "ScheduleView.hpp"
#include <Wt/WLabel.h>
#include <Wt/WPushButton.h>
#include <Wt/WText.h>
#include <Wt/WBreak.h>
#include <Wt/WCssStyleSheet.h>
#include <iomanip>
#include <sstream>

ScheduleView::ScheduleView(WebApplication* app) 
    : app_(app) {
    setupUI();
}

void ScheduleView::setupUI() {
    setStyleClass("schedule-view");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto title = addNew<Wt::WText>("<h2>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</h2>");
    title->setStyleClass("section-title");
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    auto controls = addNew<Wt::WContainerWidget>();
    controls->setStyleClass("schedule-controls");
    
    // –í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
    auto branchContainer = controls->addNew<Wt::WContainerWidget>();
    branchContainer->setStyleClass("control-group");
    
    auto branchLabel = branchContainer->addNew<Wt::WLabel>("–§–∏–ª–∏–∞–ª:");
    branchComboBox_ = branchContainer->addNew<Wt::WComboBox>();
    branchComboBox_->addItem("–í—Å–µ —Ñ–∏–ª–∏–∞–ª—ã");
    branchComboBox_->addItem("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∏–ª–∏–∞–ª");
    branchComboBox_->addItem("–°–µ–≤–µ—Ä–Ω—ã–π —Ñ–∏–ª–∏–∞–ª");
    branchLabel->setBuddy(branchComboBox_);
    branchComboBox_->changed().connect(this, &ScheduleView::handleBranchChange);
    
    // –í—ã–±–æ—Ä –¥–∞—Ç—ã
    auto dateContainer = controls->addNew<Wt::WContainerWidget>();
    dateContainer->setStyleClass("control-group");
    
    auto dateLabel = dateContainer->addNew<Wt::WLabel>("–î–∞—Ç–∞:");
    datePicker_ = dateContainer->addNew<Wt::WDatePicker>();
    datePicker_->setDate(Wt::WDate::currentDate());
    // –£–±–∏—Ä–∞–µ–º setBuddy –¥–ª—è datePicker, —Ç–∞–∫ –∫–∞–∫ WDatePicker –Ω–µ —è–≤–ª—è–µ—Ç—Å—è WFormWidget
    // dateLabel->setBuddy(datePicker_);
    datePicker_->changed().connect(this, &ScheduleView::handleDateChange);
    
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    auto refreshBtn = controls->addNew<Wt::WPushButton>("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
    refreshBtn->setStyleClass("btn btn-outline-primary");
    refreshBtn->clicked().connect(this, &ScheduleView::loadSchedule);
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = addNew<Wt::WText>();
    statusText_->setStyleClass("status-text");
    
    // –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    scheduleTable_ = addNew<Wt::WTable>();
    scheduleTable_->setStyleClass("schedule-table");
    scheduleTable_->setHeaderCount(1);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadSchedule();
}

void ScheduleView::loadSchedule() {
    auto selectedDate = datePicker_->date();
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    auto time_t = selectedDate.toJulianDay() * 86400; // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    auto timePoint = std::chrono::system_clock::from_time_t(time_t);
    
    displayScheduleForDate(timePoint);
}

void ScheduleView::setupScheduleTable() {
    scheduleTable_->clear();
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    scheduleTable_->elementAt(0, 0)->addNew<Wt::WText>("–í—Ä–µ–º—è");
    scheduleTable_->elementAt(0, 1)->addNew<Wt::WText>("–ó–∞–ª");
    scheduleTable_->elementAt(0, 2)->addNew<Wt::WText>("–ó–∞–Ω—è—Ç–∏–µ");
    scheduleTable_->elementAt(0, 3)->addNew<Wt::WText>("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å");
    scheduleTable_->elementAt(0, 4)->addNew<Wt::WText>("–£—Ä–æ–≤–µ–Ω—å");
    scheduleTable_->elementAt(0, 5)->addNew<Wt::WText>("–°–≤–æ–±–æ–¥–Ω–æ");
    scheduleTable_->elementAt(0, 6)->addNew<Wt::WText>("–î–µ–π—Å—Ç–≤–∏—è");
    
    // –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for (int i = 0; i < 7; i++) {
        scheduleTable_->elementAt(0, i)->setStyleClass("table-header");
    }
}

void ScheduleView::displayScheduleForDate(const std::chrono::system_clock::time_point& date) {
    setupScheduleTable();
    
    // –ó–∞–≥–ª—É—à–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    std::vector<std::tuple<std::string, std::string, std::string, std::string, std::string, int>> testLessons = {
        {"10:00-11:00", "–ó–∞–ª 1", "–°–∞–ª—å—Å–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ù–∞—á–∏–Ω–∞—é—â–∏–π", 5},
        {"11:00-12:00", "–ó–∞–ª 2", "–ë–∞—á–∞—Ç–∞", "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤", "–°—Ä–µ–¥–Ω–∏–π", 3},
        {"14:00-15:30", "–ó–∞–ª 1", "–¢–∞–Ω–≥–æ", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", 2},
        {"16:00-17:00", "–ó–∞–ª 3", "–•–∏–ø-—Ö–æ–ø", "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤", "–í—Å–µ —É—Ä–æ–≤–Ω–∏", 8},
        {"18:00-19:30", "–ó–∞–ª 2", "–°–∞–ª—å—Å–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è", "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", 1}
    };
    
    int row = 1;
    for (const auto& lesson : testLessons) {
        scheduleTable_->elementAt(row, 0)->addNew<Wt::WText>(std::get<0>(lesson));
        scheduleTable_->elementAt(row, 1)->addNew<Wt::WText>(std::get<1>(lesson));
        scheduleTable_->elementAt(row, 2)->addNew<Wt::WText>(std::get<2>(lesson));
        scheduleTable_->elementAt(row, 3)->addNew<Wt::WText>(std::get<3>(lesson));
        scheduleTable_->elementAt(row, 4)->addNew<Wt::WText>(std::get<4>(lesson));
        
        auto spotsText = scheduleTable_->elementAt(row, 5)->addNew<Wt::WText>(std::to_string(std::get<5>(lesson)));
        if (std::get<5>(lesson) < 3) {
            spotsText->setStyleClass("low-spots");
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        if (app_->getUserSession()->isAuthenticated() && app_->getUserSession()->isClient()) {
            auto enrollBtn = scheduleTable_->elementAt(row, 6)->addNew<Wt::WPushButton>("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è");
            enrollBtn->setStyleClass("btn btn-sm btn-success");
            enrollBtn->clicked().connect([this, row]() {
                statusText_->setText("–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ " + std::to_string(row));
            });
        } else {
            scheduleTable_->elementAt(row, 6)->addNew<Wt::WText>("–í–æ–π–¥–∏—Ç–µ –¥–ª—è –∑–∞–ø–∏—Å–∏");
        }
        
        row++;
    }
    
    if (testLessons.empty()) {
        statusText_->setText("–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        statusText_->setStyleClass("status-text info");
    } else {
        statusText_->setText("–ù–∞–π–¥–µ–Ω–æ " + std::to_string(testLessons.size()) + " –∑–∞–Ω—è—Ç–∏–π");
        statusText_->setStyleClass("status-text success");
    }
}

void ScheduleView::handleDateChange() {
    loadSchedule();
}

void ScheduleView::handleBranchChange() {
    loadSchedule();
}