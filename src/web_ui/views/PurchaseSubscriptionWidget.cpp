#include "PurchaseSubscriptionWidget.hpp"
#include "../WebApplication.hpp"
#include <Wt/WBreak.h>
#include <iostream>

PurchaseSubscriptionWidget::PurchaseSubscriptionWidget(WebApplication* app) 
    : app_(app),
      subscriptionTypeComboBox_(nullptr),
      purchaseButton_(nullptr),
      backButton_(nullptr),
      statusText_(nullptr),
      detailsText_(nullptr) {
    
    std::cout << "üîß –°–æ–∑–¥–∞–Ω–∏–µ PurchaseSubscriptionWidget..." << std::endl;
    setupUI();
    std::cout << "‚úÖ PurchaseSubscriptionWidget —Å–æ–∑–¥–∞–Ω" << std::endl;
}

void PurchaseSubscriptionWidget::setupUI() {
    std::cout << "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI PurchaseSubscriptionWidget..." << std::endl;
    
    setStyleClass("purchase-subscription-widget");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("subscription-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("subscription-card-header");
    auto headerText = header->addNew<Wt::WText>("<h2>üõí –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç</h2>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –§–æ—Ä–º–∞
    auto form = card->addNew<Wt::WContainerWidget>();
    form->setStyleClass("purchase-subscription-form");
    
    // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    auto typeGroup = form->addNew<Wt::WContainerWidget>();
    typeGroup->setStyleClass("form-group");
    
    auto typeLabel = typeGroup->addNew<Wt::WText>("<label class='form-label'>üé´ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞</label>");
    typeLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    subscriptionTypeComboBox_ = typeGroup->addNew<Wt::WComboBox>();
    subscriptionTypeComboBox_->setStyleClass("form-input");
    subscriptionTypeComboBox_->changed().connect(this, &PurchaseSubscriptionWidget::updateSubscriptionDetails);
    
    // –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
    auto detailsGroup = form->addNew<Wt::WContainerWidget>();
    detailsGroup->setStyleClass("subscription-details");
    
    detailsText_ = detailsGroup->addNew<Wt::WText>();
    detailsText_->setStyleClass("subscription-details-text");
    
    // –ö–Ω–æ–ø–∫–∏
    auto buttonGroup = form->addNew<Wt::WContainerWidget>();
    buttonGroup->setStyleClass("purchase-subscription-button-group");
    
    purchaseButton_ = buttonGroup->addNew<Wt::WPushButton>("üí≥ –ö–£–ü–ò–¢–¨ –ê–ë–û–ù–ï–ú–ï–ù–¢");
    purchaseButton_->setStyleClass("btn-purchase-subscription");
    purchaseButton_->clicked().connect(this, &PurchaseSubscriptionWidget::handlePurchase);
    
    backButton_ = buttonGroup->addNew<Wt::WPushButton>("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É");
    backButton_->setStyleClass("btn-back");
    backButton_->clicked().connect(this, &PurchaseSubscriptionWidget::handleBack);
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = form->addNew<Wt::WText>();
    statusText_->setStyleClass("subscription-status");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
    loadSubscriptionTypes();
    
    std::cout << "‚úÖ UI PurchaseSubscriptionWidget –Ω–∞—Å—Ç—Ä–æ–µ–Ω" << std::endl;
}

void PurchaseSubscriptionWidget::loadSubscriptionTypes() {
    try {
        auto subscriptionTypes = getAvailableSubscriptionTypesFromService();
        
        subscriptionTypeComboBox_->clear();
        subscriptionTypeComboBox_->addItem("-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ --");
        
        for (const auto& type : subscriptionTypes) {
            std::string typeInfo = type.name + " - " + std::to_string(static_cast<int>(type.price)) + " —Ä—É–±.";
            subscriptionTypeComboBox_->addItem(typeInfo);
        }
        
        if (subscriptionTypes.empty()) {
            updateStatus("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", true);
        } else {
            updateStatus("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–∏–ø–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: " + std::to_string(subscriptionTypes.size()), false);
        }
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: " << e.what() << std::endl;
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤", true);
    }
}

void PurchaseSubscriptionWidget::handlePurchase() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (subscriptionTypeComboBox_->currentIndex() <= 0) {
            updateStatus("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞", true);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        int typeIndex = subscriptionTypeComboBox_->currentIndex() - 1;
        auto subscriptionTypes = getAvailableSubscriptionTypesFromService();
        
        if (typeIndex < 0 || typeIndex >= static_cast<int>(subscriptionTypes.size())) {
            updateStatus("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞", true);
            return;
        }
        
        UUID subscriptionTypeId = subscriptionTypes[typeIndex].subscriptionTypeId;
        
        // –°–æ–∑–¥–∞–µ–º DTO –∑–∞–ø—Ä–æ—Å–∞
        SubscriptionRequestDTO request;
        request.clientId = getCurrentClientId();
        request.subscriptionTypeId = subscriptionTypeId;
        
        // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        auto response = purchaseSubscriptionThroughService(request);
        
        updateStatus("‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω! ID: " + response.subscriptionId.toString(), false);
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        subscriptionTypeComboBox_->setCurrentIndex(0);
        detailsText_->setText("");
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: " + std::string(e.what()), true);
    }
}

void PurchaseSubscriptionWidget::handleBack() {
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    if (onBackToList_) {
        onBackToList_();
    }
}

void PurchaseSubscriptionWidget::setBackToListCallback(std::function<void()> callback) {
    onBackToList_ = std::move(callback);
}

void PurchaseSubscriptionWidget::updateSubscriptionDetails() {
    try {
        if (subscriptionTypeComboBox_->currentIndex() <= 0) {
            detailsText_->setText("");
            return;
        }
        
        int typeIndex = subscriptionTypeComboBox_->currentIndex() - 1;
        auto subscriptionTypes = getAvailableSubscriptionTypesFromService();
        
        if (typeIndex < 0 || typeIndex >= static_cast<int>(subscriptionTypes.size())) {
            detailsText_->setText("");
            return;
        }
        
        const auto& selectedType = subscriptionTypes[typeIndex];
        
        std::string details = "<div class='subscription-details-card'>";
        details += "<h3>" + selectedType.name + "</h3>";
        details += "<p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> " + selectedType.description + "</p>";
        details += "<p><strong>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</strong> " + std::to_string(selectedType.validityDays) + " –¥–Ω–µ–π</p>";
        
        if (selectedType.unlimited) {
            details += "<p><strong>–ü–æ—Å–µ—â–µ–Ω–∏—è:</strong> –ë–µ–∑–ª–∏–º–∏—Ç</p>";
        } else {
            details += "<p><strong>–ü–æ—Å–µ—â–µ–Ω–∏—è:</strong> " + std::to_string(selectedType.visitCount) + "</p>";
        }
        
        details += "<p><strong>–¶–µ–Ω–∞:</strong> " + std::to_string(static_cast<int>(selectedType.price)) + " —Ä—É–±.</p>";
        details += "</div>";
        
        detailsText_->setText(details);
        detailsText_->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: " << e.what() << std::endl;
        detailsText_->setText("");
    }
}

void PurchaseSubscriptionWidget::updateStatus(const std::string& message, bool isError) {
    statusText_->setText(message);
    if (isError) {
        statusText_->removeStyleClass("status-success");
        statusText_->addStyleClass("status-error");
    } else {
        statusText_->removeStyleClass("status-error");
        statusText_->addStyleClass("status-success");
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
std::vector<SubscriptionTypeResponseDTO> PurchaseSubscriptionWidget::getAvailableSubscriptionTypesFromService() {
    try {
        return app_->getSubscriptionController()->getAvailableSubscriptionTypes();
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: " << e.what() << std::endl;
        return {};
    }
}

SubscriptionResponseDTO PurchaseSubscriptionWidget::purchaseSubscriptionThroughService(const SubscriptionRequestDTO& request) {
    try {
        return app_->getSubscriptionController()->purchaseSubscription(request);
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: " << e.what() << std::endl;
        throw;
    }
}

UUID PurchaseSubscriptionWidget::getCurrentClientId() {
    return app_->getCurrentClientId();
}