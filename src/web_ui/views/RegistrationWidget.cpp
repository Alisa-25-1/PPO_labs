#include "RegistrationWidget.hpp"
#include "../WebApplication.hpp"
#include <Wt/WBreak.h>
#include <Wt/WTimer.h>
#include <regex>
#include <iostream>
#include <cctype>

RegistrationWidget::RegistrationWidget(WebApplication* app) 
    : app_(app) {
    setupUI();
}

void RegistrationWidget::setupUI() {
    setStyleClass("registration-container");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("registration-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("registration-header");
    auto headerText = header->addNew<Wt::WText>("<h1>üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    header->addNew<Wt::WText>("<p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å</p>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –§–æ—Ä–º–∞
    auto form = card->addNew<Wt::WContainerWidget>();
    form->setStyleClass("registration-form");
    
    // –§–ò–û
    auto nameGroup = form->addNew<Wt::WContainerWidget>();
    nameGroup->setStyleClass("form-group");
    
    auto nameLabel = nameGroup->addNew<Wt::WText>("<label class='form-label'>üë§ –§–ò–û</label>");
    nameLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    nameEdit_ = nameGroup->addNew<Wt::WLineEdit>();
    nameEdit_->setPlaceholderText("–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á");
    nameEdit_->setStyleClass("form-input");
    
    // Email
    auto emailGroup = form->addNew<Wt::WContainerWidget>();
    emailGroup->setStyleClass("form-group");
    
    auto emailLabel = emailGroup->addNew<Wt::WText>("<label class='form-label'>üìß Email</label>");
    emailLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    emailEdit_ = emailGroup->addNew<Wt::WLineEdit>();
    emailEdit_->setPlaceholderText("example@mail.ru");
    emailEdit_->setStyleClass("form-input email-input");
    
    // –¢–µ–ª–µ—Ñ–æ–Ω
    auto phoneGroup = form->addNew<Wt::WContainerWidget>();
    phoneGroup->setStyleClass("form-group");
    
    auto phoneLabel = phoneGroup->addNew<Wt::WText>("<label class='form-label'>üìû –¢–µ–ª–µ—Ñ–æ–Ω</label>");
    phoneLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    phoneEdit_ = phoneGroup->addNew<Wt::WLineEdit>();
    phoneEdit_->setPlaceholderText("+7 (999) 999-99-99");
    phoneEdit_->setStyleClass("form-input");
    
    // –ü–∞—Ä–æ–ª—å
    auto passwordGroup = form->addNew<Wt::WContainerWidget>();
    passwordGroup->setStyleClass("form-group");
    
    auto passwordLabel = passwordGroup->addNew<Wt::WText>("<label class='form-label'>üîí –ü–∞—Ä–æ–ª—å</label>");
    passwordLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    passwordEdit_ = passwordGroup->addNew<Wt::WPasswordEdit>();
    passwordEdit_->setPlaceholderText("–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤");
    passwordEdit_->setStyleClass("form-input password-input");
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    auto confirmPasswordGroup = form->addNew<Wt::WContainerWidget>();
    confirmPasswordGroup->setStyleClass("form-group");
    
    auto confirmPasswordLabel = confirmPasswordGroup->addNew<Wt::WText>("<label class='form-label'>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>");
    confirmPasswordLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    confirmPasswordEdit_ = confirmPasswordGroup->addNew<Wt::WPasswordEdit>();
    confirmPasswordEdit_->setPlaceholderText("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å");
    confirmPasswordEdit_->setStyleClass("form-input password-input");
    
    // –ö–Ω–æ–ø–∫–∏
    auto buttonGroup = form->addNew<Wt::WContainerWidget>();
    buttonGroup->setStyleClass("registration-button-group");
    
    registerButton_ = buttonGroup->addNew<Wt::WPushButton>("üöÄ –°–û–ó–î–ê–¢–¨ –ê–ö–ö–ê–£–ù–¢");
    registerButton_->setStyleClass("btn-register");
    registerButton_->clicked().connect(this, &RegistrationWidget::handleRegister);
    
    backButton_ = buttonGroup->addNew<Wt::WPushButton>("‚Üê –ù–∞–∑–∞–¥ –∫–æ –≤—Ö–æ–¥—É");
    backButton_->setStyleClass("btn-back");
    backButton_->clicked().connect(this, &RegistrationWidget::handleBack);
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = form->addNew<Wt::WText>();
    statusText_->setStyleClass("registration-status");
}

void RegistrationWidget::handleRegister() {
    if (!validateForm()) {
        return;
    }
    
    std::string name = nameEdit_->text().toUTF8();
    std::string email = emailEdit_->text().toUTF8();
    std::string phone = phoneEdit_->text().toUTF8();
    std::string password = passwordEdit_->text().toUTF8();
    
    try {
        AuthResponseDTO response;
        bool success = app_->getAuthController()->registerClient(name, email, phone, password, response);
        
        if (success) {
            updateStatus("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã.", false);
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            nameEdit_->setText("");
            emailEdit_->setText("");
            phoneEdit_->setText("");
            passwordEdit_->setText("");
            confirmPasswordEdit_->setText("");
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            app_->loginUser(response);
            
        } else {
            updateStatus("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.", true);
        }
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " << e.what() << std::endl;
        updateStatus("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + std::string(e.what()), true);
    }
}

void RegistrationWidget::handleBack() {
    app_->showLogin();
}

bool RegistrationWidget::validateForm() {
    std::string name = nameEdit_->text().toUTF8();
    std::string email = emailEdit_->text().toUTF8();
    std::string phone = phoneEdit_->text().toUTF8();
    std::string password = passwordEdit_->text().toUTF8();
    std::string confirmPassword = confirmPasswordEdit_->text().toUTF8();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (name.empty() || email.empty() || phone.empty() || password.empty() || confirmPassword.empty()) {
        updateStatus("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", true);
        return false;
    }
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ (—Ä–∞–∑—Ä–µ—à–∞–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
    if (!Client::isValidName(name)) {
        updateStatus("‚ùå –§–ò–û –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, –ø—Ä–æ–±–ª–µ–ª—ã –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤", true);
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    std::regex emailPattern(R"(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$)");
    if (!std::regex_match(email, emailPattern)) {
        updateStatus("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å", true);
        return false;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ Client
    if (!Client::isValidPhone(phone)) {
        updateStatus("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç +7 XXX XXX-XX-XX)", true);
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if (password.length() < 8) {
        updateStatus("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤", true);
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
    if (password != confirmPassword) {
        updateStatus("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", true);
        return false;
    }
    
    return true;
}

void RegistrationWidget::updateStatus(const std::string& message, bool isError) {
    statusText_->setText(message);
    if (isError) {
        statusText_->removeStyleClass("status-success");
        statusText_->addStyleClass("status-error");
    } else {
        statusText_->removeStyleClass("status-error");
        statusText_->addStyleClass("status-success");
    }
}