#include "BookingCreateWidget.hpp"
#include "../WebApplication.hpp"
#include <Wt/WBreak.h>
#include <Wt/WTimer.h>
#include <iostream>

BookingCreateWidget::BookingCreateWidget(WebApplication* app) 
    : app_(app) {
    setupUI();
}

void BookingCreateWidget::setupUI() {
    setStyleClass("booking-create-widget");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("booking-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("booking-card-header");
    auto headerText = header->addNew<Wt::WText>("<h2>‚ûï –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –§–æ—Ä–º–∞
    auto form = card->addNew<Wt::WContainerWidget>();
    form->setStyleClass("booking-form");
    
    // –í—ã–±–æ—Ä –∑–∞–ª–∞
    auto hallGroup = form->addNew<Wt::WContainerWidget>();
    hallGroup->setStyleClass("form-group");
    
    auto hallLabel = hallGroup->addNew<Wt::WText>("<label class='form-label'>üèüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª</label>");
    hallLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    hallComboBox_ = hallGroup->addNew<Wt::WComboBox>();
    hallComboBox_->setStyleClass("form-input");
    hallComboBox_->changed().connect(this, &BookingCreateWidget::loadTimeSlots);
    
    // –î–∞—Ç–∞
    auto dateGroup = form->addNew<Wt::WContainerWidget>();
    dateGroup->setStyleClass("form-group");
    
    auto dateLabel = dateGroup->addNew<Wt::WText>("<label class='form-label'>üìÖ –î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</label>");
    dateLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    dateEdit_ = dateGroup->addNew<Wt::WDateEdit>();
    dateEdit_->setStyleClass("form-input");
    dateEdit_->setDate(Wt::WDate::currentDate());
    dateEdit_->changed().connect(this, &BookingCreateWidget::loadTimeSlots);
    
    // –í—Ä–µ–º—è
    auto timeGroup = form->addNew<Wt::WContainerWidget>();
    timeGroup->setStyleClass("form-group");
    
    auto timeLabel = timeGroup->addNew<Wt::WText>("<label class='form-label'>‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</label>");
    timeLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    timeComboBox_ = timeGroup->addNew<Wt::WComboBox>();
    timeComboBox_->setStyleClass("form-input");
    
    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    auto durationGroup = form->addNew<Wt::WContainerWidget>();
    durationGroup->setStyleClass("form-group");
    
    auto durationLabel = durationGroup->addNew<Wt::WText>("<label class='form-label'>‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</label>");
    durationLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    durationComboBox_ = durationGroup->addNew<Wt::WComboBox>();
    durationComboBox_->setStyleClass("form-input");
    durationComboBox_->addItem("1 —á–∞—Å");
    durationComboBox_->addItem("2 —á–∞—Å–∞");
    durationComboBox_->addItem("3 —á–∞—Å–∞");
    durationComboBox_->addItem("4 —á–∞—Å–∞");
    durationComboBox_->setCurrentIndex(0);
    
    // –¶–µ–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    auto purposeGroup = form->addNew<Wt::WContainerWidget>();
    purposeGroup->setStyleClass("form-group");
    
    auto purposeLabel = purposeGroup->addNew<Wt::WText>("<label class='form-label'>üéØ –¶–µ–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</label>");
    purposeLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    purposeEdit_ = purposeGroup->addNew<Wt::WLineEdit>();
    purposeEdit_->setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –†–µ–ø–µ—Ç–∏—Ü–∏—è —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã");
    purposeEdit_->setStyleClass("form-input");
    
    // –ö–Ω–æ–ø–∫–∏
    auto buttonGroup = form->addNew<Wt::WContainerWidget>();
    buttonGroup->setStyleClass("booking-button-group");
    
    createButton_ = buttonGroup->addNew<Wt::WPushButton>("üöÄ –°–û–ó–î–ê–¢–¨ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï");
    createButton_->setStyleClass("btn-booking-create");
    createButton_->clicked().connect(this, &BookingCreateWidget::handleCreate);
    
    backButton_ = buttonGroup->addNew<Wt::WPushButton>("‚Üê –ù–∞–∑–∞–¥");
    backButton_->setStyleClass("btn-booking-back");
    backButton_->clicked().connect(this, &BookingCreateWidget::handleBack);
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = form->addNew<Wt::WText>();
    statusText_->setStyleClass("booking-status");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ª—ã
    loadAvailableHalls();
    loadTimeSlots();  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
}

void BookingCreateWidget::handleCreate() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        int hallIndex = hallComboBox_->currentIndex();
        if (hallIndex < 0) {
            updateStatus("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª", true);
            return;
        }
        
        int timeIndex = timeComboBox_->currentIndex();
        if (timeIndex < 0) {
            updateStatus("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è", true);
            return;
        }
        
        std::string purpose = purposeEdit_->text().toUTF8();
        if (purpose.empty()) {
            updateStatus("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", true);
            return;
        }
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        updateStatus("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! (–∑–∞–≥–ª—É—à–∫–∞)", false);
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        purposeEdit_->setText("");
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " + std::string(e.what()), true);
    }
}

void BookingCreateWidget::handleBack() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
}

void BookingCreateWidget::updateStatus(const std::string& message, bool isError) {
    statusText_->setText(message);
    if (isError) {
        statusText_->removeStyleClass("status-success");
        statusText_->addStyleClass("status-error");
    } else {
        statusText_->removeStyleClass("status-error");
        statusText_->addStyleClass("status-success");
    }
}

void BookingCreateWidget::loadAvailableHalls() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ª—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        // auto halls = app_->getBookingController()->getAvailableHalls();
        
        // –ó–∞–≥–ª—É—à–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        hallComboBox_->clear();
        hallComboBox_->addItem("üèüÔ∏è –ó–∞–ª 1 - –ë–æ–ª—å—à–æ–π –∑–∞–ª (–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 50 —á–µ–ª.)");
        hallComboBox_->addItem("üèüÔ∏è –ó–∞–ª 2 - –ú–∞–ª—ã–π –∑–∞–ª (–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 25 —á–µ–ª.)");
        hallComboBox_->addItem("üèüÔ∏è –ó–∞–ª 3 - –ó–µ—Ä–∫–∞–ª—å–Ω—ã–π –∑–∞–ª (–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 30 —á–µ–ª.)");
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ª–æ–≤: " << e.what() << std::endl;
    }
}

void BookingCreateWidget::loadTimeSlots() {
    try {
        timeComboBox_->clear();
        
        // –ó–∞–≥–ª—É—à–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        timeComboBox_->addItem("09:00 - 10:00");
        timeComboBox_->addItem("10:00 - 11:00");
        timeComboBox_->addItem("11:00 - 12:00");
        timeComboBox_->addItem("12:00 - 13:00");
        timeComboBox_->addItem("13:00 - 14:00");
        timeComboBox_->addItem("14:00 - 15:00");
        timeComboBox_->addItem("15:00 - 16:00");
        timeComboBox_->addItem("16:00 - 17:00");
        timeComboBox_->addItem("17:00 - 18:00");
        timeComboBox_->addItem("18:00 - 19:00");
        timeComboBox_->addItem("19:00 - 20:00");
        timeComboBox_->addItem("20:00 - 21:00");
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: " << e.what() << std::endl;
    }
}