#include "BookingCreateWidget.hpp"
#include "../WebApplication.hpp"
#include "../../data/DateTimeUtils.hpp"
#include <Wt/WBreak.h>
#include <Wt/WTimer.h>
#include <Wt/WMessageBox.h>
#include <iostream>
#include <sstream>
#include <iomanip>

BookingCreateWidget::BookingCreateWidget(WebApplication* app) 
    : app_(app),
      hallComboBox_(nullptr),
      dateEdit_(nullptr),
      timeComboBox_(nullptr),
      durationComboBox_(nullptr),
      purposeEdit_(nullptr),
      createButton_(nullptr),
      backButton_(nullptr),
      statusText_(nullptr) {
    
    std::cout << "üîß –°–æ–∑–¥–∞–Ω–∏–µ BookingCreateWidget..." << std::endl;
    setupUI();
    std::cout << "‚úÖ BookingCreateWidget —Å–æ–∑–¥–∞–Ω" << std::endl;
}

void BookingCreateWidget::setupUI() {
    std::cout << "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI BookingCreateWidget..." << std::endl;
    
    setStyleClass("booking-create-widget");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("booking-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("booking-card-header");
    auto headerText = header->addNew<Wt::WText>("<h2>‚ûï –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –§–æ—Ä–º–∞
    auto form = card->addNew<Wt::WContainerWidget>();
    form->setStyleClass("booking-form");
    
    // –í—ã–±–æ—Ä –∑–∞–ª–∞
    auto hallGroup = form->addNew<Wt::WContainerWidget>();
    hallGroup->setStyleClass("form-group");
    
    auto hallLabel = hallGroup->addNew<Wt::WText>("<label class='form-label'>üèüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª</label>");
    hallLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    hallComboBox_ = hallGroup->addNew<Wt::WComboBox>();
    hallComboBox_->setStyleClass("form-input");
    hallComboBox_->changed().connect(this, &BookingCreateWidget::loadAvailableTimeSlots);
    
    // –î–∞—Ç–∞
    auto dateGroup = form->addNew<Wt::WContainerWidget>();
    dateGroup->setStyleClass("form-group");
    
    auto dateLabel = dateGroup->addNew<Wt::WText>("<label class='form-label'>üìÖ –î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</label>");
    dateLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    dateEdit_ = dateGroup->addNew<Wt::WDateEdit>();
    dateEdit_->setStyleClass("form-input");
    dateEdit_->setDate(Wt::WDate::currentDate());
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ (–º–∞–∫—Å–∏–º—É–º +30 –¥–Ω–µ–π)
    Wt::WDate maxDate = Wt::WDate::currentDate().addDays(30);
    dateEdit_->setTop(maxDate);
    dateEdit_->setBottom(Wt::WDate::currentDate());
    
    dateEdit_->changed().connect(this, &BookingCreateWidget::loadAvailableTimeSlots);
    
    // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    auto timeGroup = form->addNew<Wt::WContainerWidget>();
    timeGroup->setStyleClass("form-group");
    
    auto timeLabel = timeGroup->addNew<Wt::WText>("<label class='form-label'>‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</label>");
    timeLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    timeComboBox_ = timeGroup->addNew<Wt::WComboBox>();
    timeComboBox_->setStyleClass("form-input");
    timeComboBox_->addItem("-- –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è --");
    timeComboBox_->setCurrentIndex(0);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏
    timeComboBox_->changed().connect(this, &BookingCreateWidget::updateAvailableDurations);
    
    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –£–ë–ò–†–ê–ï–ú –ü–û–í–¢–û–†–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï
    auto durationGroup = form->addNew<Wt::WContainerWidget>();
    durationGroup->setStyleClass("form-group");
    
    auto durationLabel = durationGroup->addNew<Wt::WText>("<label class='form-label'>‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</label>");
    durationLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    durationComboBox_ = durationGroup->addNew<Wt::WComboBox>();
    durationComboBox_->setStyleClass("form-input");
    durationComboBox_->addItem("-- –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è --");
    durationComboBox_->setCurrentIndex(0);
    
    // –¶–µ–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    auto purposeGroup = form->addNew<Wt::WContainerWidget>();
    purposeGroup->setStyleClass("form-group");
    
    auto purposeLabel = purposeGroup->addNew<Wt::WText>("<label class='form-label'>üéØ –¶–µ–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</label>");
    purposeLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    purposeEdit_ = purposeGroup->addNew<Wt::WLineEdit>();
    purposeEdit_->setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –†–µ–ø–µ—Ç–∏—Ü–∏—è —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã");
    purposeEdit_->setStyleClass("form-input");
    
    // –ö–Ω–æ–ø–∫–∏
    auto buttonGroup = form->addNew<Wt::WContainerWidget>();
    buttonGroup->setStyleClass("booking-button-group");
    
    createButton_ = buttonGroup->addNew<Wt::WPushButton>("üöÄ –°–û–ó–î–ê–¢–¨ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï");
    createButton_->setStyleClass("btn-booking-create");
    createButton_->clicked().connect(this, &BookingCreateWidget::handleCreate);
    
    backButton_ = buttonGroup->addNew<Wt::WPushButton>("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É");
    backButton_->setStyleClass("btn-booking-back");
    backButton_->clicked().connect(this, &BookingCreateWidget::handleBack);
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = form->addNew<Wt::WText>();
    statusText_->setStyleClass("booking-status");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ª—ã
    loadAvailableHalls();
    
    std::cout << "‚úÖ UI BookingCreateWidget –Ω–∞—Å—Ç—Ä–æ–µ–Ω" << std::endl;
}

void BookingCreateWidget::handleCreate() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (hallComboBox_->currentIndex() <= 0) {
            updateStatus("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª", true);
            return;
        }
        
        if (timeComboBox_->currentIndex() <= 0) {
            updateStatus("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", true);
            return;
        }
        
        if (durationComboBox_->currentIndex() <= 0) {
            updateStatus("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", true);
            return;
        }
        
        std::string purpose = purposeEdit_->text().toUTF8();
        if (purpose.empty()) {
            updateStatus("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", true);
            return;
        }
        
        if (purpose.length() < 3) {
            updateStatus("‚ùå –¶–µ–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤", true);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        int hallIndex = hallComboBox_->currentIndex() - 1; // -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª"
        auto halls = getAvailableHallsFromDB();
        if (hallIndex < 0 || hallIndex >= halls.size()) {
            updateStatus("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞–ª–∞", true);
            return;
        }
        
        UUID hallId = halls[hallIndex].getId();
        Wt::WDate selectedDate = dateEdit_->date();
        std::string timeStr = timeComboBox_->currentText().toUTF8();
        
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç "HH:MM")
        int hours, minutes;
        if (sscanf(timeStr.c_str(), "%d:%d", &hours, &minutes) != 2) {
            updateStatus("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏", true);
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É –Ω–∞—á–∞–ª–∞
        auto startTime = createDateTime(selectedDate, hours, minutes);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        int durationIndex = durationComboBox_->currentIndex();
        int durationMinutes = 0;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        switch (durationIndex) {
            case 1: durationMinutes = 60; break;   // 1 —á–∞—Å
            case 2: durationMinutes = 120; break;  // 2 —á–∞—Å–∞
            case 3: durationMinutes = 180; break;  // 3 —á–∞—Å–∞
            case 4: durationMinutes = 240; break;  // 4 —á–∞—Å–∞
            default: 
                updateStatus("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", true);
                return;
        }
        
        // –°–æ–∑–¥–∞–µ–º TimeSlot
        TimeSlot timeSlot(startTime, durationMinutes);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
        if (!isTimeSlotAvailable(hallId, timeSlot)) {
            updateStatus("‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.", true);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        UUID clientId = getCurrentClientId();
        
        // –°–æ–∑–¥–∞–µ–º DTO –∑–∞–ø—Ä–æ—Å–∞
        BookingRequestDTO request;
        request.clientId = clientId;
        request.hallId = hallId;
        request.timeSlot = timeSlot;
        request.purpose = purpose;
        
        // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        auto response = createBookingThroughService(request);
        
        updateStatus("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! ID: " + response.bookingId.toString(), false);
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        purposeEdit_->setText("");
        timeComboBox_->setCurrentIndex(0);
        durationComboBox_->setCurrentIndex(0);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        loadAvailableTimeSlots();
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " + std::string(e.what()), true);
    }
}

void BookingCreateWidget::handleBack() {
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    if (onBackToList_) {
        onBackToList_();
    }
}

void BookingCreateWidget::setBackToListCallback(std::function<void()> callback) {
    onBackToList_ = std::move(callback);
}

void BookingCreateWidget::updateStatus(const std::string& message, bool isError) {
    statusText_->setText(message);
    if (isError) {
        statusText_->removeStyleClass("status-success");
        statusText_->addStyleClass("status-error");
    } else {
        statusText_->removeStyleClass("status-error");
        statusText_->addStyleClass("status-success");
    }
}

void BookingCreateWidget::loadAvailableHalls() {
    try {
        auto halls = getAvailableHallsFromDB();
        
        hallComboBox_->clear();
        hallComboBox_->addItem("-- –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª --");
        
        for (const auto& hall : halls) {
            std::string hallInfo = "üèüÔ∏è " + hall.getName() + 
                                 " (–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: " + std::to_string(hall.getCapacity()) + " —á–µ–ª.)" +
                                 " - " + hall.getDescription();
            hallComboBox_->addItem(hallInfo);
        }
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ª–æ–≤: " << e.what() << std::endl;
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ª–æ–≤", true);
    }
}

void BookingCreateWidget::loadAvailableTimeSlots() {
    try {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –≤—Ä–µ–º–µ–Ω–∏
        timeComboBox_->clear();
        timeComboBox_->addItem("-- –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è --");
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        durationComboBox_->clear();
        durationComboBox_->addItem("-- –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è --");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∑–∞–ª
        if (hallComboBox_->currentIndex() <= 0) {
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–ª
        int hallIndex = hallComboBox_->currentIndex() - 1;
        auto halls = getAvailableHallsFromDB();
        if (hallIndex < 0 || hallIndex >= halls.size()) {
            return;
        }
        
        UUID hallId = halls[hallIndex].getId();
        Wt::WDate selectedDate = dateEdit_->date();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        auto availableSlots = getAvailableTimeSlotsFromService(hallId, selectedDate);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for (const auto& slot : availableSlots) {
            auto timePoint = slot.getStartTime();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º DateTimeUtils –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            std::string timeStr = DateTimeUtils::formatTime(timePoint);
            
            timeComboBox_->addItem(timeStr);
        }
        
        if (availableSlots.empty()) {
            timeComboBox_->addItem("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É");
            timeComboBox_->setCurrentIndex(1);
        }
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: " << e.what() << std::endl;
        timeComboBox_->addItem("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    }
}

void BookingCreateWidget::updateAvailableDurations() {
    try {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        durationComboBox_->clear();
        durationComboBox_->addItem("-- –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å --");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        if (hallComboBox_->currentIndex() <= 0 || timeComboBox_->currentIndex() <= 0) {
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–ª
        int hallIndex = hallComboBox_->currentIndex() - 1;
        auto halls = getAvailableHallsFromDB();
        if (hallIndex < 0 || hallIndex >= halls.size()) {
            return;
        }
        
        UUID hallId = halls[hallIndex].getId();
        Wt::WDate selectedDate = dateEdit_->date();
        std::string timeStr = timeComboBox_->currentText().toUTF8();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Å—Ç—å –≤ —Å–∫–æ–±–∫–∞—Ö)
        size_t bracketPos = timeStr.find('(');
        if (bracketPos != std::string::npos) {
            timeStr = timeStr.substr(0, bracketPos);
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ
            while (!timeStr.empty() && std::isspace(timeStr.back())) {
                timeStr.pop_back();
            }
        }
        
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç "HH:MM")
        int hours, minutes;
        if (sscanf(timeStr.c_str(), "%d:%d", &hours, &minutes) != 2) {
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ—á–∫—É –Ω–∞—á–∞–ª–∞
        auto startTime = createDateTime(selectedDate, hours, minutes);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        auto availableDurations = app_->getBookingController()->getAvailableDurations(hallId, startTime);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
        for (int duration : availableDurations) {
            std::string durationText;
            if (duration == 60) {
                durationText = "1 —á–∞—Å (60 –º–∏–Ω—É—Ç)";
            } else if (duration == 120) {
                durationText = "2 —á–∞—Å–∞ (120 –º–∏–Ω—É—Ç)";
            } else if (duration == 180) {
                durationText = "3 —á–∞—Å–∞ (180 –º–∏–Ω—É—Ç)";
            } else if (duration == 240) {
                durationText = "4 —á–∞—Å–∞ (240 –º–∏–Ω—É—Ç)";
            } else {
                durationText = std::to_string(duration/60) + " —á–∞—Å–∞ (" + std::to_string(duration) + " –º–∏–Ω—É—Ç)";
            }
            durationComboBox_->addItem(durationText);
        }
        
        if (availableDurations.empty()) {
            durationComboBox_->addItem("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π");
        }
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: " << e.what() << std::endl;
        durationComboBox_->addItem("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
std::vector<DanceHall> BookingCreateWidget::getAvailableHallsFromDB() {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º BookingController –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return app_->getBookingController()->getAvailableHalls();
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ª–æ–≤: " << e.what() << std::endl;
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {};
    }
}

std::vector<TimeSlot> BookingCreateWidget::getAvailableTimeSlotsFromService(const UUID& hallId, const Wt::WDate& date) {
    try {
        auto timePoint = createDateTime(date, 0, 0);
        return app_->getBookingController()->getAvailableTimeSlots(hallId, timePoint);
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: " << e.what() << std::endl;
        return {};
    }
}

bool BookingCreateWidget::isTimeSlotAvailable(const UUID& hallId, const TimeSlot& timeSlot) {
    try {
        return app_->getBookingController()->isTimeSlotAvailable(hallId, timeSlot);
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞: " << e.what() << std::endl;
        return false;
    }
}

BookingResponseDTO BookingCreateWidget::createBookingThroughService(const BookingRequestDTO& request) {
    try {
        return app_->getBookingController()->createBooking(request);
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " << e.what() << std::endl;
        throw; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
    }
}

UUID BookingCreateWidget::getCurrentClientId() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
    return app_->getCurrentClientId();
}

std::chrono::system_clock::time_point BookingCreateWidget::createDateTime(const Wt::WDate& date, int hours, int minutes) {
    return DateTimeUtils::createDateTime(
        date.year(), date.month(), date.day(), 
        hours, minutes, 0
    );
}