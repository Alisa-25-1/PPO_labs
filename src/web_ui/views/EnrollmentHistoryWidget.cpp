#include "EnrollmentHistoryWidget.hpp"
#include "../WebApplication.hpp"
#include <Wt/WPushButton.h>

EnrollmentHistoryWidget::EnrollmentHistoryWidget(WebApplication* app) 
    : app_(app),
      historyTable_(nullptr),
      statusText_(nullptr) {
    
    setupUI();
}

void EnrollmentHistoryWidget::setupUI() {
    setStyleClass("enrollment-history-widget");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("lesson-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("lesson-card-header");
    auto headerText = header->addNew<Wt::WText>("<h2>üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π</h2>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    auto refreshBtn = header->addNew<Wt::WPushButton>("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
    refreshBtn->setStyleClass("btn-refresh");
    refreshBtn->clicked().connect([this]() {
        loadHistory();
    });
    
    // –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
    auto content = card->addNew<Wt::WContainerWidget>();
    content->setStyleClass("history-list-content");
    
    historyTable_ = content->addNew<Wt::WTable>();
    historyTable_->setStyleClass("history-table");
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = content->addNew<Wt::WText>();
    statusText_->setStyleClass("lesson-status");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    loadHistory();
}

void EnrollmentHistoryWidget::loadHistory() {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        historyTable_->clear();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ)
        UUID clientId = app_->getCurrentClientId();
        auto enrollments = app_->getLessonController()->getClientEnrollments(clientId);
        
        if (enrollments.empty()) {
            auto noHistoryRow = historyTable_->elementAt(0, 0);
            noHistoryRow->setColumnSpan(4);
            noHistoryRow->addNew<Wt::WText>("<div style='text-align: center; padding: 2rem; color: #6c757d;'>–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –ø—É—Å—Ç–∞</div>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
            return;
        }
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        historyTable_->elementAt(0, 0)->addNew<Wt::WText>("<strong>–ó–∞–Ω—è—Ç–∏–µ</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        historyTable_->elementAt(0, 1)->addNew<Wt::WText>("<strong>–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        historyTable_->elementAt(0, 2)->addNew<Wt::WText>("<strong>–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        historyTable_->elementAt(0, 3)->addNew<Wt::WText>("<strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        int row = 1;
        for (const auto& enrollment : enrollments) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
            auto lesson = app_->getLessonController()->getLesson(enrollment.lessonId);
            
            // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
            historyTable_->elementAt(row, 0)->addNew<Wt::WText>(lesson.name);
            
            // –î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º formatDateTime –≤–º–µ—Å—Ç–æ formatDate
            std::string lessonDate = DateTimeUtils::formatDateTime(lesson.timeSlot.getStartTime());
            historyTable_->elementAt(row, 1)->addNew<Wt::WText>(lessonDate);
            
            // –°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
            auto statusCell = historyTable_->elementAt(row, 2);
            std::string statusDisplay;
            std::string statusClass;
            
            if (enrollment.status == "ATTENDED") {
                statusDisplay = "‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ";
                statusClass = "status-attended";
            } else if (enrollment.status == "MISSED") {
                statusDisplay = "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ";
                statusClass = "status-missed";
            } else if (enrollment.status == "CANCELLED") {
                statusDisplay = "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ";
                statusClass = "status-cancelled";
            } else {
                statusDisplay = "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ";
                statusClass = "status-registered";
            }
            
            auto statusText = statusCell->addNew<Wt::WText>(statusDisplay);
            statusCell->setStyleClass(statusClass);
            
            // –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
            historyTable_->elementAt(row, 3)->addNew<Wt::WText>(enrollment.enrollmentDate);
            
            row++;
        }
        
        updateStatus("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: " + std::to_string(enrollments.size()), false);
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: " + std::string(e.what()), true);
    }
}

void EnrollmentHistoryWidget::updateStatus(const std::string& message, bool isError) {
    statusText_->setText(message);
    if (isError) {
        statusText_->removeStyleClass("status-success");
        statusText_->addStyleClass("status-error");
    } else {
        statusText_->removeStyleClass("status-error");
        statusText_->addStyleClass("status-success");
    }
}