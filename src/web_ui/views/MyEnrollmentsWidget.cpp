#include "MyEnrollmentsWidget.hpp"
#include "../WebApplication.hpp"
#include "../../data/DateTimeUtils.hpp"
#include <Wt/WMessageBox.h>
#include <iostream>

MyEnrollmentsWidget::MyEnrollmentsWidget(WebApplication* app) 
    : app_(app),
      enrollmentsTable_(nullptr),
      statusText_(nullptr) {
    
    setupUI();
}

void MyEnrollmentsWidget::setupUI() {
    setStyleClass("my-enrollments-widget");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("lesson-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("lesson-card-header");
    auto headerText = header->addNew<Wt::WText>("<h2>üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è</h2>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    auto refreshBtn = header->addNew<Wt::WPushButton>("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
    refreshBtn->setStyleClass("btn-refresh");
    refreshBtn->clicked().connect([this]() {
        loadEnrollments();
    });
    
    // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
    auto content = card->addNew<Wt::WContainerWidget>();
    content->setStyleClass("enrollment-list-content");
    
    enrollmentsTable_ = content->addNew<Wt::WTable>();
    enrollmentsTable_->setStyleClass("enrollment-table");
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = content->addNew<Wt::WText>();
    statusText_->setStyleClass("lesson-status");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏
    loadEnrollments();
}

void MyEnrollmentsWidget::loadEnrollments() {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        enrollmentsTable_->clear();
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UUID clientId = app_->getCurrentClientId();
        auto enrollments = app_->getLessonController()->getClientEnrollments(clientId);
        
        // –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è
        std::vector<EnrollmentResponseDTO> futureEnrollments;
        auto now = std::chrono::system_clock::now();
        
        for (const auto& enrollment : enrollments) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
            auto lesson = app_->getLessonController()->getLesson(enrollment.lessonId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –≤ –±—É–¥—É—â–µ–º –∏ —Å—Ç–∞—Ç—É—Å "REGISTERED"
            if (lesson.timeSlot.getStartTime() > now && enrollment.status == "REGISTERED") {
                futureEnrollments.push_back(enrollment);
            }
        }
        
        if (futureEnrollments.empty()) {
            auto noEnrollmentsRow = enrollmentsTable_->elementAt(0, 0);
            noEnrollmentsRow->setColumnSpan(6);
            noEnrollmentsRow->addNew<Wt::WText>("<div style='text-align: center; padding: 2rem; color: #6c757d;'>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –±—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è</div>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
            return;
        }
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        enrollmentsTable_->elementAt(0, 0)->addNew<Wt::WText>("<strong>–ó–∞–Ω—è—Ç–∏–µ</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        enrollmentsTable_->elementAt(0, 1)->addNew<Wt::WText>("<strong>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        enrollmentsTable_->elementAt(0, 2)->addNew<Wt::WText>("<strong>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        enrollmentsTable_->elementAt(0, 3)->addNew<Wt::WText>("<strong>–°—Ç–∞—Ç—É—Å</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        enrollmentsTable_->elementAt(0, 4)->addNew<Wt::WText>("<strong>–î–µ–π—Å—Ç–≤–∏—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        int row = 1;
        for (const auto& enrollment : futureEnrollments) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
            auto lesson = app_->getLessonController()->getLesson(enrollment.lessonId);
            
            // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
            enrollmentsTable_->elementAt(row, 0)->addNew<Wt::WText>(lesson.name);
            
            // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
            std::string lessonDateTime = DateTimeUtils::formatDateTime(lesson.timeSlot.getStartTime());
            enrollmentsTable_->elementAt(row, 1)->addNew<Wt::WText>(lessonDateTime);
            
            // –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
            enrollmentsTable_->elementAt(row, 2)->addNew<Wt::WText>(enrollment.enrollmentDate);
            
            // –°—Ç–∞—Ç—É—Å - –≤—Å–µ–≥–¥–∞ "–ê–∫—Ç–∏–≤–Ω–∞—è" –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π
            auto statusCell = enrollmentsTable_->elementAt(row, 3);
            auto statusText = statusCell->addNew<Wt::WText>("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è");
            statusCell->setStyleClass("status-registered");
            
            // –î–µ–π—Å—Ç–≤–∏—è - –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π
            auto actionsCell = enrollmentsTable_->elementAt(row, 4);
            actionsCell->setStyleClass("cell-actions");
            
            auto cancelBtn = actionsCell->addNew<Wt::WPushButton>("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
            cancelBtn->setStyleClass("btn-cancel");
            cancelBtn->clicked().connect([this, enrollment]() {
                handleCancelEnrollment(enrollment.enrollmentId);
            });
            
            row++;
        }
        
        updateStatus("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: " + std::to_string(futureEnrollments.size()), false);
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π: " + std::string(e.what()), true);
    }
}

void MyEnrollmentsWidget::handleCancelEnrollment(const UUID& enrollmentId) {
    try {
        // –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        auto dialog = addNew<Wt::WDialog>("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã");
        dialog->setModal(true);
        dialog->setStyleClass("cancel-dialog");
        
        auto content = dialog->contents()->addNew<Wt::WContainerWidget>();
        content->setStyleClass("dialog-content");
        
        auto message = content->addNew<Wt::WText>(
            "<h3 style='text-align: center; margin-bottom: 1rem;'>–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ</h3>"
            "<p style='text-align: center; color: #666;'>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ?</p>"
        );
        message->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        auto buttonContainer = dialog->footer()->addNew<Wt::WContainerWidget>();
        buttonContainer->setStyleClass("dialog-buttons");
        
        auto cancelBtn = buttonContainer->addNew<Wt::WPushButton>("–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å");
        cancelBtn->setStyleClass("btn-dialog-secondary");
        cancelBtn->clicked().connect([dialog]() {
            dialog->reject();
        });
        
        auto confirmBtn = buttonContainer->addNew<Wt::WPushButton>("–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å");
        confirmBtn->setStyleClass("btn-dialog-primary");
        confirmBtn->clicked().connect([this, dialog, enrollmentId]() {
            dialog->accept();
            
            UUID clientId = app_->getCurrentClientId();
            auto response = app_->getLessonController()->cancelEnrollment(enrollmentId, clientId);
            
            updateStatus("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞!", false);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            loadEnrollments();
        });
        
        dialog->finished().connect([this, dialog](Wt::DialogCode code) {
            removeChild(dialog);
        });
        
        dialog->show();
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: " + std::string(e.what()), true);
    }
}

void MyEnrollmentsWidget::updateStatus(const std::string& message, bool isError) {
    statusText_->setText(message);
    if (isError) {
        statusText_->removeStyleClass("status-success");
        statusText_->addStyleClass("status-error");
    } else {
        statusText_->removeStyleClass("status-error");
        statusText_->addStyleClass("status-success");
    }
}