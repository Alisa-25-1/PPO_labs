#include "LessonView.hpp"
#include <Wt/WLabel.h>
#include <Wt/WPushButton.h>
#include <Wt/WBreak.h>
#include <Wt/WMessageBox.h>

LessonView::LessonView(WebApplication* app) 
    : app_(app) {
    setupUI();
}

void LessonView::setupUI() {
    setStyleClass("lessons-view");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto title = addNew<Wt::WText>("<h2>üéì –ú–æ–∏ –∑–∞–Ω—è—Ç–∏—è</h2>");
    title->setStyleClass("section-title");
    
    // –§–∏–ª—å—Ç—Ä
    auto filterContainer = addNew<Wt::WContainerWidget>();
    filterContainer->setStyleClass("filter-container");
    
    auto filterLabel = filterContainer->addNew<Wt::WLabel>("–ü–æ–∫–∞–∑–∞—Ç—å:");
    filterComboBox_ = filterContainer->addNew<Wt::WComboBox>();
    filterComboBox_->addItem("–í—Å–µ –∑–∞–Ω—è—Ç–∏—è");
    filterComboBox_->addItem("–¢–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏");
    filterComboBox_->addItem("–¢–æ–ª—å–∫–æ –º–æ–∏ –∑–∞–ø–∏—Å–∏");
    filterComboBox_->addItem("–ü—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–Ω—è—Ç–∏—è");
    filterLabel->setBuddy(filterComboBox_);
    filterComboBox_->changed().connect(this, &LessonView::handleFilterChange);
    
    // –†–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
    auto availableTitle = addNew<Wt::WText>("<h3>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è</h3>");
    availableTitle->setStyleClass("subsection-title");
    
    lessonsTable_ = addNew<Wt::WTable>();
    lessonsTable_->setStyleClass("lessons-table");
    lessonsTable_->setHeaderCount(1);
    
    // –†–∞–∑–¥–µ–ª –º–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π
    auto enrollmentsTitle = addNew<Wt::WText>("<h3>–ú–æ–∏ –∑–∞–ø–∏—Å–∏</h3>");
    enrollmentsTitle->setStyleClass("subsection-title");
    
    enrollmentsTable_ = addNew<Wt::WTable>();
    enrollmentsTable_->setStyleClass("enrollments-table");
    enrollmentsTable_->setHeaderCount(1);
    
    statusText_ = addNew<Wt::WText>();
    statusText_->setStyleClass("status-text");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadLessons();
    loadEnrollments();
}

void LessonView::loadLessons() {
    setupLessonsTable();
    
    // –ó–∞–≥–ª—É—à–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    std::vector<std::tuple<std::string, std::string, std::string, std::string, std::string, int>> testLessons = {
        {"2023-12-01 10:00", "–°–∞–ª—å—Å–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ù–∞—á–∏–Ω–∞—é—â–∏–π", "–ó–∞–ª 1", 5},
        {"2023-12-02 11:00", "–ë–∞—á–∞—Ç–∞", "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤", "–°—Ä–µ–¥–Ω–∏–π", "–ó–∞–ª 2", 3},
        {"2023-12-03 14:00", "–¢–∞–Ω–≥–æ", "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "–ó–∞–ª 1", 2},
        {"2023-12-04 16:00", "–•–∏–ø-—Ö–æ–ø", "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤", "–í—Å–µ —É—Ä–æ–≤–Ω–∏", "–ó–∞–ª 3", 8}
    };
    
    int row = 1;
    for (const auto& lesson : testLessons) {
        lessonsTable_->elementAt(row, 0)->addNew<Wt::WText>(std::get<0>(lesson));
        lessonsTable_->elementAt(row, 1)->addNew<Wt::WText>(std::get<1>(lesson));
        lessonsTable_->elementAt(row, 2)->addNew<Wt::WText>(std::get<2>(lesson));
        lessonsTable_->elementAt(row, 3)->addNew<Wt::WText>(std::get<3>(lesson));
        lessonsTable_->elementAt(row, 4)->addNew<Wt::WText>(std::get<4>(lesson));
        
        auto spotsText = lessonsTable_->elementAt(row, 5)->addNew<Wt::WText>(std::to_string(std::get<5>(lesson)));
        if (std::get<5>(lesson) < 3) {
            spotsText->setStyleClass("low-spots");
        }
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
        if (app_->getUserSession()->isAuthenticated() && app_->getUserSession()->isClient()) {
            auto enrollBtn = lessonsTable_->elementAt(row, 6)->addNew<Wt::WPushButton>("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è");
            enrollBtn->setStyleClass("btn btn-sm btn-success");
            enrollBtn->clicked().connect([this, row]() {
                handleEnroll(UUID::generate()); // –ó–∞–≥–ª—É—à–∫–∞ UUID
            });
        }
        
        row++;
    }
}

void LessonView::loadEnrollments() {
    setupEnrollmentsTable();
    
    // –ó–∞–≥–ª—É—à–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    std::vector<std::tuple<std::string, std::string, std::string, std::string, std::string>> testEnrollments = {
        {"2023-12-01 10:00", "–°–∞–ª—å—Å–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ó–∞–ª 1", "–ó–∞–ø–∏—Å–∞–Ω"},
        {"2023-12-05 18:00", "–°–∞–ª—å—Å–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è", "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ó–∞–ª 2", "–ó–∞–ø–∏—Å–∞–Ω"},
        {"2023-11-28 14:00", "–ë–∞—á–∞—Ç–∞", "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤", "–ó–∞–ª 3", "–ü–æ—Å–µ—â–µ–Ω–æ"}
    };
    
    int row = 1;
    for (const auto& enrollment : testEnrollments) {
        enrollmentsTable_->elementAt(row, 0)->addNew<Wt::WText>(std::get<0>(enrollment));
        enrollmentsTable_->elementAt(row, 1)->addNew<Wt::WText>(std::get<1>(enrollment));
        enrollmentsTable_->elementAt(row, 2)->addNew<Wt::WText>(std::get<2>(enrollment));
        enrollmentsTable_->elementAt(row, 3)->addNew<Wt::WText>(std::get<3>(enrollment));
        
        auto statusText = enrollmentsTable_->elementAt(row, 4)->addNew<Wt::WText>(std::get<4>(enrollment));
        if (std::get<4>(enrollment) == "–ü–æ—Å–µ—â–µ–Ω–æ") {
            statusText->setStyleClass("status-attended");
        } else {
            statusText->setStyleClass("status-registered");
        }
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if (std::get<4>(enrollment) == "–ó–∞–ø–∏—Å–∞–Ω") {
            auto cancelBtn = enrollmentsTable_->elementAt(row, 5)->addNew<Wt::WPushButton>("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
            cancelBtn->setStyleClass("btn btn-sm btn-outline-danger");
            cancelBtn->clicked().connect([this, row]() {
                handleCancelEnrollment(UUID::generate()); // –ó–∞–≥–ª—É—à–∫–∞ UUID
            });
        } else {
            enrollmentsTable_->elementAt(row, 5)->addNew<Wt::WText>("-");
        }
        
        row++;
    }
}

void LessonView::setupLessonsTable() {
    lessonsTable_->clear();
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    lessonsTable_->elementAt(0, 0)->addNew<Wt::WText>("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è");
    lessonsTable_->elementAt(0, 1)->addNew<Wt::WText>("–ó–∞–Ω—è—Ç–∏–µ");
    lessonsTable_->elementAt(0, 2)->addNew<Wt::WText>("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å");
    lessonsTable_->elementAt(0, 3)->addNew<Wt::WText>("–£—Ä–æ–≤–µ–Ω—å");
    lessonsTable_->elementAt(0, 4)->addNew<Wt::WText>("–ó–∞–ª");
    lessonsTable_->elementAt(0, 5)->addNew<Wt::WText>("–°–≤–æ–±–æ–¥–Ω–æ");
    lessonsTable_->elementAt(0, 6)->addNew<Wt::WText>("–î–µ–π—Å—Ç–≤–∏—è");
    
    for (int i = 0; i < 7; i++) {
        lessonsTable_->elementAt(0, i)->setStyleClass("table-header");
    }
}

void LessonView::setupEnrollmentsTable() {
    enrollmentsTable_->clear();
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    enrollmentsTable_->elementAt(0, 0)->addNew<Wt::WText>("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è");
    enrollmentsTable_->elementAt(0, 1)->addNew<Wt::WText>("–ó–∞–Ω—è—Ç–∏–µ");
    enrollmentsTable_->elementAt(0, 2)->addNew<Wt::WText>("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å");
    enrollmentsTable_->elementAt(0, 3)->addNew<Wt::WText>("–ó–∞–ª");
    enrollmentsTable_->elementAt(0, 4)->addNew<Wt::WText>("–°—Ç–∞—Ç—É—Å");
    enrollmentsTable_->elementAt(0, 5)->addNew<Wt::WText>("–î–µ–π—Å—Ç–≤–∏—è");
    
    for (int i = 0; i < 6; i++) {
        enrollmentsTable_->elementAt(0, i)->setStyleClass("table-header");
    }
}

void LessonView::handleEnroll(const UUID& lessonId) {
    if (!app_->getUserSession()->isAuthenticated()) {
        statusText_->setText("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.");
        statusText_->setStyleClass("status-text error");
        return;
    }
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ
    statusText_->setText("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!");
    statusText_->setStyleClass("status-text success");
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
    loadLessons();
    loadEnrollments();
}

void LessonView::handleCancelEnrollment(const UUID& enrollmentId) {
    auto messageBox = addChild(
        std::make_unique<Wt::WMessageBox>(
            "–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ?",
            Wt::Icon::Question,
            Wt::StandardButton::Yes | Wt::StandardButton::No
        )
    );
    
    messageBox->buttonClicked().connect([=](Wt::StandardButton button) {
        if (button == Wt::StandardButton::Yes) {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
            statusText_->setText("–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
            statusText_->setStyleClass("status-text info");
            loadEnrollments();
            loadLessons();
        }
        removeChild(messageBox);
    });
    
    messageBox->show();
}

void LessonView::handleFilterChange() {
    loadLessons();
}