#include "SubscriptionListWidget.hpp"
#include "../WebApplication.hpp"
#include <Wt/WTimer.h>
#include <Wt/WMessageBox.h>
#include <iostream>
#include <iomanip>
#include <sstream>

SubscriptionListWidget::SubscriptionListWidget(WebApplication* app) 
    : app_(app),
      subscriptionsTable_(nullptr),
      statusText_(nullptr) {
    
    std::cout << "üîß –°–æ–∑–¥–∞–Ω–∏–µ SubscriptionListWidget..." << std::endl;
    setupUI();
    std::cout << "‚úÖ SubscriptionListWidget —Å–æ–∑–¥–∞–Ω" << std::endl;
}

void SubscriptionListWidget::setupUI() {
    std::cout << "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI SubscriptionListWidget..." << std::endl;
    
    setStyleClass("subscription-list-widget");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("subscription-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("subscription-card-header");
    auto headerText = header->addNew<Wt::WText>("<h2>üìã –ú–æ–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã</h2>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    auto refreshBtn = header->addNew<Wt::WPushButton>("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
    refreshBtn->setStyleClass("btn-refresh");
    refreshBtn->clicked().connect([this]() {
        loadSubscriptions();
    });
    
    // –¢–∞–±–ª–∏—Ü–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
    auto content = card->addNew<Wt::WContainerWidget>();
    content->setStyleClass("subscription-list-content");
    
    subscriptionsTable_ = content->addNew<Wt::WTable>();
    subscriptionsTable_->setStyleClass("subscription-table");
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = content->addNew<Wt::WText>();
    statusText_->setStyleClass("subscription-status");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
    loadSubscriptions();
    
    std::cout << "‚úÖ UI SubscriptionListWidget –Ω–∞—Å—Ç—Ä–æ–µ–Ω" << std::endl;
}

void SubscriptionListWidget::loadSubscriptions() {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        subscriptionsTable_->clear();
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        subscriptionsTable_->elementAt(0, 0)->addNew<Wt::WText>("<strong>ID —Ç–∏–ø–∞</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        subscriptionsTable_->elementAt(0, 1)->addNew<Wt::WText>("<strong>–ü–µ—Ä–∏–æ–¥</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        subscriptionsTable_->elementAt(0, 2)->addNew<Wt::WText>("<strong>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–µ—â–µ–Ω–∏–π</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        subscriptionsTable_->elementAt(0, 3)->addNew<Wt::WText>("<strong>–°—Ç–∞—Ç—É—Å</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        subscriptionsTable_->elementAt(0, 4)->addNew<Wt::WText>("<strong>–î–µ–π—Å—Ç–≤–∏—è</strong>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        auto subscriptions = getClientSubscriptionsFromService();
        
        if (subscriptions.empty()) {
            auto noSubscriptionsRow = subscriptionsTable_->elementAt(1, 0);
            noSubscriptionsRow->setColumnSpan(5);
            noSubscriptionsRow->addNew<Wt::WText>("<div style='text-align: center; padding: 2rem; color: #6c757d;'>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤</div>")->setTextFormat(Wt::TextFormat::UnsafeXHTML);
            return;
        }
        
        int row = 1;
        for (const auto& subscription : subscriptions) {
            // ID —Ç–∏–ø–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
            auto typeCell = subscriptionsTable_->elementAt(row, 0);
            typeCell->addNew<Wt::WText>(subscription.subscriptionTypeId.toString());
            typeCell->setStyleClass("cell-type-id");
            
            // –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è
            auto periodCell = subscriptionsTable_->elementAt(row, 1);
            std::string periodStr = formatDate(subscription.startDate) + " - " + formatDate(subscription.endDate);
            periodCell->addNew<Wt::WText>(periodStr);
            periodCell->setStyleClass("cell-period");
            
            // –û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–µ—â–µ–Ω–∏–π
            std::string visitsStr = subscription.remainingVisits == -1 ? 
                "–ë–µ–∑–ª–∏–º–∏—Ç" : std::to_string(subscription.remainingVisits);
            subscriptionsTable_->elementAt(row, 2)->addNew<Wt::WText>(visitsStr);
            
            // –°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
            auto statusCell = subscriptionsTable_->elementAt(row, 3);
            auto statusText = statusCell->addNew<Wt::WText>(getStatusDisplayName(subscription.status));
            statusCell->setStyleClass(getStatusStyleClass(subscription.status));
            
            // –î–µ–π—Å—Ç–≤–∏—è
            auto actionsCell = subscriptionsTable_->elementAt(row, 4);
            actionsCell->setStyleClass("cell-actions");
            
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤
            if (subscription.status == "ACTIVE") {
                auto cancelBtn = actionsCell->addNew<Wt::WPushButton>("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
                cancelBtn->setStyleClass("btn-cancel-small");
                cancelBtn->clicked().connect([this, subscription]() {
                    handleCancelSubscription(subscription.subscriptionId);
                });
            } else {
                actionsCell->addNew<Wt::WText>("‚Äî");
            }
            
            row++;
        }
        
        updateStatus("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: " + std::to_string(subscriptions.size()), false);
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: " + std::string(e.what()), true);
    }
}

void SubscriptionListWidget::handleCancelSubscription(const UUID& subscriptionId) {
    try {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        auto dialog = addNew<Wt::WDialog>("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã");
        dialog->setModal(true);
        dialog->setStyleClass("cancel-dialog");
        
        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–∞
        auto content = dialog->contents()->addNew<Wt::WContainerWidget>();
        content->setStyleClass("dialog-content");
        
        // –ò–∫–æ–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç
        auto icon = content->addNew<Wt::WText>("<div style='text-align: center; font-size: 3rem; margin-bottom: 1rem;'>‚ö†Ô∏è</div>");
        icon->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        auto message = content->addNew<Wt::WText>(
            "<h3 style='text-align: center; margin-bottom: 1rem;'>–û—Ç–º–µ–Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞</h3>"
            "<p style='text-align: center; color: #666;'>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç?</p>"
        );
        message->setTextFormat(Wt::TextFormat::UnsafeXHTML);
        
        // –ö–Ω–æ–ø–∫–∏
        auto buttonContainer = dialog->footer()->addNew<Wt::WContainerWidget>();
        buttonContainer->setStyleClass("dialog-buttons");
        
        auto cancelBtn = buttonContainer->addNew<Wt::WPushButton>("–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å");
        cancelBtn->setStyleClass("btn-dialog-secondary");
        cancelBtn->clicked().connect([dialog]() {
            dialog->reject();
        });
        
        auto confirmBtn = buttonContainer->addNew<Wt::WPushButton>("–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å");
        confirmBtn->setStyleClass("btn-dialog-primary");
        confirmBtn->clicked().connect([this, dialog, subscriptionId]() {
            dialog->accept();
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≤—ã–∑—ã–≤–∞–µ–º cancelSubscription –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ performCancelSubscription
            cancelSubscription(subscriptionId);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞
        dialog->finished().connect([this, dialog](Wt::DialogCode code) {
            removeChild(dialog);
        });
        
        dialog->show();
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: " + std::string(e.what()), true);
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ performCancelSubscription –≤ cancelSubscription
void SubscriptionListWidget::cancelSubscription(const UUID& subscriptionId) {
    try {
        // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–º–µ–Ω—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        bool success = cancelSubscriptionThroughService(subscriptionId);
        
        if (success) {
            updateStatus("‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!", false);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            auto timer = std::make_shared<Wt::WTimer>();
            timer->setSingleShot(true);
            timer->setInterval(std::chrono::seconds(1));
            timer->timeout().connect([this, timer]() {
                loadSubscriptions();
            });
            timer->start();
        } else {
            updateStatus("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç", true);
        }
        
    } catch (const std::exception& e) {
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: " + std::string(e.what()), true);
    }
}

void SubscriptionListWidget::updateStatus(const std::string& message, bool isError) {
    statusText_->setText(message);
    if (isError) {
        statusText_->removeStyleClass("status-success");
        statusText_->addStyleClass("status-error");
    } else {
        statusText_->removeStyleClass("status-error");
        statusText_->addStyleClass("status-success");
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
std::vector<SubscriptionResponseDTO> SubscriptionListWidget::getClientSubscriptionsFromService() {
    try {
        return app_->getSubscriptionController()->getClientSubscriptions(getCurrentClientId());
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤: " << e.what() << std::endl;
        return {};
    }
}

bool SubscriptionListWidget::cancelSubscriptionThroughService(const UUID& subscriptionId) {
    try {
        auto response = app_->getSubscriptionController()->cancelSubscription(subscriptionId, getCurrentClientId());
        return response.status == "CANCELLED";
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: " << e.what() << std::endl;
        return false;
    }
}

UUID SubscriptionListWidget::getCurrentClientId() {
    return app_->getCurrentClientId();
}

std::string SubscriptionListWidget::formatDate(const std::string& dateStr) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    if (dateStr.length() >= 10) {
        return dateStr.substr(0, 10); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É YYYY-MM-DD
    }
    return dateStr;
}

std::string SubscriptionListWidget::getStatusDisplayName(const std::string& status) {
    static std::map<std::string, std::string> statusMap = {
        {"ACTIVE", "–ê–∫—Ç–∏–≤–µ–Ω"},
        {"SUSPENDED", "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"},
        {"EXPIRED", "–ò—Å—Ç–µ–∫"},
        {"CANCELLED", "–û—Ç–º–µ–Ω–µ–Ω"}
    };
    
    auto it = statusMap.find(status);
    return it != statusMap.end() ? it->second : status;
}

std::string SubscriptionListWidget::getStatusStyleClass(const std::string& status) {
    static std::map<std::string, std::string> styleMap = {
        {"ACTIVE", "status-active"},
        {"SUSPENDED", "status-suspended"},
        {"EXPIRED", "status-expired"},
        {"CANCELLED", "status-cancelled"}
    };
    
    auto it = styleMap.find(status);
    return it != styleMap.end() ? it->second : "";
}