#include "LoginWidget.hpp"
#include "../WebApplication.hpp"
#include <Wt/WTimer.h>
#include <iostream>

LoginWidget::LoginWidget(WebApplication* app) 
    : app_(app) {
    
    setStyleClass("auth-container");
    
    auto card = addNew<Wt::WContainerWidget>();
    card->setStyleClass("auth-card");
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    auto header = card->addNew<Wt::WContainerWidget>();
    header->setStyleClass("auth-header");
    auto headerText = header->addNew<Wt::WText>("<h1 class='auth-title'>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h1>");
    headerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –§–æ—Ä–º–∞
    auto form = card->addNew<Wt::WContainerWidget>();
    form->setStyleClass("auth-form");
    
    // Email
    auto emailGroup = form->addNew<Wt::WContainerWidget>();
    emailGroup->setStyleClass("auth-input-group");
    
    auto emailLabel = emailGroup->addNew<Wt::WText>("<label class='form-label'>Email</label>");
    emailLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    emailEdit_ = emailGroup->addNew<Wt::WLineEdit>();
    emailEdit_->setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email");
    emailEdit_->setStyleClass("auth-input email-input");
    
    // –ü–∞—Ä–æ–ª—å
    auto passwordGroup = form->addNew<Wt::WContainerWidget>();
    passwordGroup->setStyleClass("auth-input-group");
    
    auto passwordLabel = passwordGroup->addNew<Wt::WText>("<label class='form-label'>–ü–∞—Ä–æ–ª—å</label>");
    passwordLabel->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    passwordEdit_ = passwordGroup->addNew<Wt::WPasswordEdit>();
    passwordEdit_->setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å");
    passwordEdit_->setStyleClass("auth-input password-input");
    
    // –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞
    loginButton_ = form->addNew<Wt::WPushButton>("üöÄ –í–û–ô–¢–ò –í –°–ò–°–¢–ï–ú–£");
    loginButton_->setStyleClass("auth-button");
    loginButton_->clicked().connect(this, &LoginWidget::handleLogin);
    
    // –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    auto registerLink = form->addNew<Wt::WContainerWidget>();
    registerLink->setStyleClass("auth-footer");
    auto registerText = registerLink->addNew<Wt::WText>("<p>–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <a href='#' class='auth-link'>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</a></p>");
    registerText->setTextFormat(Wt::TextFormat::UnsafeXHTML);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registerText->clicked().connect([this]() {
        app_->showRegistration();
    });
    
    // –°—Ç–∞—Ç—É—Å
    statusText_ = form->addNew<Wt::WText>();
    statusText_->setStyleClass("auth-error-message");
}

void LoginWidget::handleLogin() {
    std::string email = emailEdit_->text().toUTF8();
    std::string password = passwordEdit_->text().toUTF8();
    
    std::cout << "üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: " << email << std::endl;
    
    try {
        if (email.empty() || password.empty()) {
            statusText_->setText("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
            statusText_->setStyleClass("auth-error-message");
            return;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AuthController –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        AuthResponseDTO response;
        bool success = app_->getAuthController()->login(email, password, response);
        
        if (success) {
            statusText_->setText("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");
            statusText_->setStyleClass("auth-success-message");
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            app_->loginUser(response);
            
        } else {
            statusText_->setText("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
            statusText_->setStyleClass("auth-error-message");
        }
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " << e.what() << std::endl;
        statusText_->setText("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " + std::string(e.what()));
        statusText_->setStyleClass("auth-error-message");
    }
}