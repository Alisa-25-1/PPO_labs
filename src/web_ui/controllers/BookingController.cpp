#include "BookingController.hpp"
#include "../../services/BookingService.hpp"
#include "../../repositories/impl/PostgreSQLBookingRepository.hpp"
#include "../../repositories/impl/PostgreSQLClientRepository.hpp"
#include "../../repositories/impl/PostgreSQLDanceHallRepository.hpp"
#include "../../repositories/impl/PostgreSQLBranchRepository.hpp"
#include "../../data/DatabaseConnection.hpp"
#include <iostream>

BookingController::BookingController(std::shared_ptr<BookingService> bookingService)
    : bookingService_(std::move(bookingService)) {
    std::cout << "‚úÖ BookingController —Å–æ–∑–¥–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º" << std::endl;
}

BookingResponseDTO BookingController::createBooking(const BookingRequestDTO& request) {
    try {
        std::cout << "üìù –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: " << request.clientId.toString() << std::endl;
        
        if (!validateBookingRequest(request)) {
            throw ValidationException("Invalid booking request data");
        }
        
        return bookingService_->createBooking(request);
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " << e.what() << std::endl;
        throw;
    }
}

BookingResponseDTO BookingController::cancelBooking(const UUID& bookingId, const UUID& clientId) {
    try {
        std::cout << "‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " << bookingId.toString() << " –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: " << clientId.toString() << std::endl;
        return bookingService_->cancelBooking(bookingId, clientId);
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " << e.what() << std::endl;
        throw;
    }
}

std::vector<BookingResponseDTO> BookingController::getClientBookings(const UUID& clientId) {
    try {
        std::cout << "üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞: " << clientId.toString() << std::endl;
        return bookingService_->getClientBookings(clientId);
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: " << e.what() << std::endl;
        return {};
    }
}

std::vector<DanceHall> BookingController::getAvailableHalls() {
    try {
        std::cout << "üèüÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ª–æ–≤" << std::endl;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º DanceHallRepository –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ª–æ–≤
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ BookingService
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        if (bookingService_) {
            return bookingService_->getAllHalls();
        }
        return {};
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ª–æ–≤: " << e.what() << std::endl;
        return {};
    }
}

// –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
std::vector<int> BookingController::getAvailableDurations(const UUID& hallId, 
                                                         const std::chrono::system_clock::time_point& startTime) {
    try {
        std::cout << "‚è±Ô∏è –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–ª–∞: " << hallId.toString() 
                  << " –≤ " << DateTimeUtils::formatTime(startTime) << std::endl;
        return bookingService_->getAvailableDurations(hallId, startTime);
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: " << e.what() << std::endl;
        return {};
    }
}

std::vector<TimeSlot> BookingController::getAvailableTimeSlots(const UUID& hallId, 
                                                              const std::chrono::system_clock::time_point& date) {
    try {
        std::cout << "‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ª–∞: " << hallId.toString() << std::endl;
        return bookingService_->getAvailableTimeSlots(hallId, date);
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: " << e.what() << std::endl;
        return {};
    }
}

bool BookingController::validateBookingRequest(const BookingRequestDTO& request) const {
    return request.validate();
}

bool BookingController::isTimeSlotAvailable(const UUID& hallId, const TimeSlot& timeSlot) const {
    try {
        std::cout << "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞ –¥–ª—è –∑–∞–ª–∞: " << hallId.toString() << std::endl;
        return bookingService_->isTimeSlotAvailable(hallId, timeSlot);
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞: " << e.what() << std::endl;
        return false;
    }
}

std::string BookingController::getHallName(const UUID& hallId) {
    try {
        std::cout << "üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–ª–∞: " << hallId.toString() << std::endl;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ª–∞ –ø–æ ID
        if (bookingService_) {
            auto hall = bookingService_->getHallById(hallId);
            if (hall) {
                return hall->getName();
            }
        }
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ª";
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–ª–∞: " << e.what() << std::endl;
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ª";
    }
}

std::vector<Branch> BookingController::getBranches() {
    try {
        std::cout << "üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤" << std::endl;
        return bookingService_->getAllBranches();
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–æ–≤: " << e.what() << std::endl;
        throw std::runtime_error("Failed to get branches: " + std::string(e.what()));
    }
}

std::vector<DanceHall> BookingController::getHallsByBranch(const UUID& branchId) {
    try {
        std::cout << "üèüÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ª–æ–≤ —Ñ–∏–ª–∏–∞–ª–∞: " << branchId.toString() << std::endl;
        return bookingService_->getHallsByBranch(branchId);
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ª–æ–≤ —Ñ–∏–ª–∏–∞–ª–∞: " << e.what() << std::endl;
        throw std::runtime_error("Failed to get halls by branch: " + std::string(e.what()));
    }
}

std::chrono::minutes BookingController::getTimezoneOffsetForHall(const UUID& hallId) {
    try {
        return bookingService_->getTimezoneOffsetForHall(hallId);
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è –∑–∞–ª–∞: " << e.what() << std::endl;
        return std::chrono::hours(3);
    }
}