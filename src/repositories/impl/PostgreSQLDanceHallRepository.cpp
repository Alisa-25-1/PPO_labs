#include "PostgreSQLDanceHallRepository.hpp"
#include <pqxx/pqxx>
#include "../../data/SqlQueryBuilder.hpp"
#include <iostream>

PostgreSQLDanceHallRepository::PostgreSQLDanceHallRepository(
    std::shared_ptr<DatabaseConnection> dbConnection)
    : dbConnection_(std::move(dbConnection)) {}

std::optional<DanceHall> PostgreSQLDanceHallRepository::findById(const UUID& id) {
    try {
        auto work = dbConnection_->beginTransaction();
        
        SqlQueryBuilder queryBuilder;
        std::string query = queryBuilder
            .select({"id", "name", "description", "capacity", "floor_type", "equipment", "branch_id"})
            .from("dance_halls")
            .where("id = $1")
            .build();
        
        auto result = work.exec_params(query, id.toString());
        
        if (result.empty()) {
            return std::nullopt;
        }
        
        auto hall = mapResultToDanceHall(result[0]);
        dbConnection_->commitTransaction(work);
        return hall;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ª–∞ –ø–æ ID " << id.toString() << ": " << e.what() << std::endl;
        throw QueryException(std::string("Failed to find hall by ID: ") + e.what());
    }
}

std::vector<DanceHall> PostgreSQLDanceHallRepository::findByBranchId(const UUID& branchId) {
    try {
        std::cout << "üîç –ü–æ–∏—Å–∫ –∑–∞–ª–æ–≤ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞: " << branchId.toString() << std::endl;
        
        auto work = dbConnection_->beginTransaction();
        
        SqlQueryBuilder queryBuilder;
        std::string query = queryBuilder
            .select({"id", "name", "description", "capacity", "floor_type", "equipment", "branch_id"})
            .from("dance_halls")
            .where("branch_id = $1")
            .build();
        
        auto result = work.exec_params(query, branchId.toString());
        
        std::cout << "üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: " << result.size() << std::endl;
        
        std::vector<DanceHall> halls;
        for (const auto& row : result) {
            try {
                auto hall = mapResultToDanceHall(row);
                halls.push_back(hall);
                std::cout << "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∑–∞–ª: " << hall.getName() 
                          << " (ID: " << hall.getId().toString() << ")" << std::endl;
            } catch (const std::exception& e) {
                std::cerr << "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏: " << e.what() << std::endl;
                std::cerr << "   –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: " << std::endl;
                std::cerr << "   - ID: " << row["id"].c_str() << std::endl;
                std::cerr << "   - –ù–∞–∑–≤–∞–Ω–∏–µ: " << row["name"].c_str() << std::endl;
                std::cerr << "   - –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: " << row["capacity"].as<int>() << std::endl;
                std::cerr << "   - –¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è: " << row["floor_type"].c_str() << std::endl;
                std::cerr << "   - –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: " << row["equipment"].c_str() << std::endl;
                std::cerr << "   - –§–∏–ª–∏–∞–ª: " << row["branch_id"].c_str() << std::endl;
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ª–æ–≤
                continue;
            }
        }
        
        dbConnection_->commitTransaction(work);
        std::cout << "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∑–∞–ª–æ–≤: " << halls.size() << std::endl;
        return halls;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ª–æ–≤ –ø–æ —Ñ–∏–ª–∏–∞–ª—É " << branchId.toString() << ": " << e.what() << std::endl;
        throw QueryException(std::string("Failed to find halls by branch ID: ") + e.what());
    }
}

bool PostgreSQLDanceHallRepository::exists(const UUID& id) {
    try {
        auto work = dbConnection_->beginTransaction();
        
        SqlQueryBuilder queryBuilder;
        std::string query = queryBuilder
            .select({"1"})
            .from("dance_halls")
            .where("id = $1")
            .build();
            
        auto result = work.exec_params(query, id.toString());
        
        dbConnection_->commitTransaction(work);
        return !result.empty();
        
    } catch (const std::exception& e) {
        throw QueryException(std::string("Failed to check hall existence: ") + e.what());
    }
}

std::vector<DanceHall> PostgreSQLDanceHallRepository::findAll() {
    try {
        auto work = dbConnection_->beginTransaction();
        
        SqlQueryBuilder queryBuilder;
        std::string query = queryBuilder
            .select({"id", "name", "description", "capacity", "floor_type", "equipment", "branch_id"})
            .from("dance_halls")
            .build();
        
        auto result = work.exec(query);
        
        std::vector<DanceHall> halls;
        for (const auto& row : result) {
            try {
                auto hall = mapResultToDanceHall(row);
                halls.push_back(hall);
            } catch (const std::exception& e) {
                std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞–ø–ø–∏–Ω–≥–µ –∑–∞–ª–∞: " << e.what() << std::endl;
                continue;
            }
        }
        
        dbConnection_->commitTransaction(work);
        return halls;
        
    } catch (const std::exception& e) {
        throw QueryException(std::string("Failed to find all halls: ") + e.what());
    }
}

bool PostgreSQLDanceHallRepository::save(const DanceHall& hall) {
    validateDanceHall(hall);
    
    try {
        auto work = dbConnection_->beginTransaction();
        
        std::map<std::string, std::string> values = {
            {"id", "$1"},
            {"name", "$2"},
            {"description", "$3"},
            {"capacity", "$4"},
            {"floor_type", "$5"},
            {"equipment", "$6"},
            {"branch_id", "$7"}
        };
        
        SqlQueryBuilder queryBuilder;
        std::string query = queryBuilder
            .insertInto("dance_halls")
            .values(values)
            .build();
        
        work.exec_params(
            query,
            hall.getId().toString(),
            hall.getName(),
            hall.getDescription(),
            hall.getCapacity(),
            hall.getFloorType(),
            hall.getEquipment(),
            hall.getBranchId().toString()
        );
             
        dbConnection_->commitTransaction(work);
        return true;
        
    } catch (const std::exception& e) {
        throw QueryException(std::string("Failed to save hall: ") + e.what());
    }
}

bool PostgreSQLDanceHallRepository::update(const DanceHall& hall) {
    validateDanceHall(hall);
    
    try {
        auto work = dbConnection_->beginTransaction();
        
        std::map<std::string, std::string> values = {
            {"name", "$2"},
            {"description", "$3"},
            {"capacity", "$4"},
            {"floor_type", "$5"},
            {"equipment", "$6"},
            {"branch_id", "$7"}
        };
        
        SqlQueryBuilder queryBuilder;
        std::string query = queryBuilder
            .update("dance_halls")
            .set(values)
            .where("id = $1")
            .build();
        
        auto result = work.exec_params(
            query,
            hall.getId().toString(),
            hall.getName(),
            hall.getDescription(),
            hall.getCapacity(),
            hall.getFloorType(),
            hall.getEquipment(),
            hall.getBranchId().toString()
        );

        dbConnection_->commitTransaction(work);
        return result.affected_rows() > 0;
        
    } catch (const std::exception& e) {
        throw QueryException(std::string("Failed to update hall: ") + e.what());
    }
}

bool PostgreSQLDanceHallRepository::remove(const UUID& id) {
    try {
        auto work = dbConnection_->beginTransaction();
        
        SqlQueryBuilder queryBuilder;
        std::string query = queryBuilder
            .deleteFrom("dance_halls")
            .where("id = $1")
            .build();
            
        auto result = work.exec_params(query, id.toString());
        
        dbConnection_->commitTransaction(work);
        return result.affected_rows() > 0;
        
    } catch (const std::exception& e) {
        throw QueryException(std::string("Failed to remove hall: ") + e.what());
    }
}

DanceHall PostgreSQLDanceHallRepository::mapResultToDanceHall(const pqxx::row& row) const {
    try {
        UUID id = UUID::fromString(row["id"].c_str());
        std::string name = row["name"].c_str();
        std::string description = row["description"].c_str();
        int capacity = row["capacity"].as<int>();
        std::string floorType = row["floor_type"].c_str();
        std::string equipment = row["equipment"].c_str();
        UUID branchId = UUID::fromString(row["branch_id"].c_str());
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
        if (name.empty()) {
            std::cerr << "‚ö†Ô∏è  –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ª–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" << std::endl;
            name = "–ó–∞–ª " + id.toString().substr(0, 8);
        }
        
        if (capacity <= 0) {
            std::cerr << "‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: " << capacity << ", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 10" << std::endl;
            capacity = 10;
        }
        
        if (floorType.empty()) {
            std::cerr << "‚ö†Ô∏è  –ü—É—Å—Ç–æ–π —Ç–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'" << std::endl;
            floorType = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ";
        }
        
        if (equipment.empty()) {
            equipment = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ";
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        DanceHall hall(id, name, capacity, branchId);
        hall.setDescription(description);
        hall.setFloorType(floorType);
        hall.setEquipment(equipment);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if (!hall.isValid()) {
            std::string error = "Invalid dance hall data after correction: ";
            error += "id=" + id.toString();
            error += ", name=" + name;
            error += ", capacity=" + std::to_string(capacity);
            error += ", floorType=" + floorType;
            error += ", branchId=" + branchId.toString();
            throw std::invalid_argument(error);
        }
        
        return hall;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ DanceHall: " << e.what() << std::endl;
        throw;
    }
}

void PostgreSQLDanceHallRepository::validateDanceHall(const DanceHall& hall) const {
    if (!hall.isValid()) {
        throw DataAccessException("Invalid hall data");
    }
}