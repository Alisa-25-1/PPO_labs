#include "AuthService.hpp"
#include "exceptions/AuthException.hpp"
#include "../models/Client.hpp"
#include <random>
#include <iostream>

AuthService::AuthService(std::shared_ptr<IClientRepository> clientRepo)
    : clientRepository_(std::move(clientRepo)), 
      passwordHasher_(std::make_unique<PasswordHasher>()) {}

AuthResponseDTO AuthService::registerClient(const AuthRequestDTO& request) {
    std::cout << "üîß AuthService::registerClient - –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " << request.email << std::endl;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã Client
    validateRegistrationData(request);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if (!isEmailAvailable(request.email)) {
        std::cout << "‚ùå AuthService::registerClient - Email —É–∂–µ –∑–∞–Ω—è—Ç: " << request.email << std::endl;
        throw EmailAlreadyExistsException();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ Client)
    UUID newId = UUID::generate();
    
    // –•–µ—à–∏—Ä—É–µ–º –ø—Ä–∞–æ–ª—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º
    std::string passwordHash = passwordHasher_->generateSecurePasswordHash(request.password);
    
    Client client(newId, request.name, request.email, request.phone);
    client.setPasswordHash(passwordHash); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à
    
    std::cout << "‚úÖ AuthService::registerClient - –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î..." << std::endl;
    
    if (!clientRepository_->save(client)) {
        throw std::runtime_error("Failed to save client to database");
    }
    
    std::cout << "‚úÖ AuthService::registerClient - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: " << request.email << std::endl;
    return AuthResponseDTO(newId, client.getName(), client.getEmail(), "ACTIVE");
}

AuthResponseDTO AuthService::login(const AuthRequestDTO& request) {
    std::cout << "üîê AuthService::login - –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: " << request.email << std::endl;
    
    if (request.email.empty() || request.password.empty()) {
        throw std::invalid_argument("Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }
    
    auto client = clientRepository_->findByEmail(request.email);
    if (!client) {
        std::cout << "‚ùå AuthService::login - –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: " << request.email << std::endl;
        throw InvalidCredentialsException();
    }
    
    if (!client->isActive()) {
        std::cout << "‚ùå AuthService::login - –ê–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: " << request.email << std::endl;
        throw AccountInactiveException();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å –∏—Å–ø–æ–ª—å—Ö–æ–≤–∞–Ω–∏–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    if (!passwordHasher_->verifySecurePassword(request.password, client->getPasswordHash())) {
        std::cout << "‚ùå AuthService::login - –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è: " << request.email << std::endl;
        throw InvalidCredentialsException();
    }
    
    std::cout << "‚úÖ AuthService::login - –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: " << request.email << std::endl;
    return AuthResponseDTO(client->getId(), client->getName(), client->getEmail(), "ACTIVE");
}

bool AuthService::changePassword(const UUID& clientId, const std::string& oldPassword, const std::string& newPassword) {
    auto client = clientRepository_->findById(clientId);
    if (!client) {
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if (!passwordHasher_->verifySecurePassword(oldPassword, client->getPasswordHash())) {
        throw InvalidCredentialsException();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    if (!Client::isValidPassword(newPassword)) {
        throw std::invalid_argument("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏");
    }
    
    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    std::string newPasswordHash = passwordHasher_->generateSecurePasswordHash(newPassword);
    Client updatedClient = *client;
    updatedClient.setPasswordHash(newPasswordHash);
    
    return clientRepository_->update(updatedClient);
}

void AuthService::resetPassword(const std::string& email) {
    auto client = clientRepository_->findByEmail(email);
    if (!client) {
        return; // Security: –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ email
    }
    
    std::string tempPassword = generateSecureTemporaryPassword();
    // –•–µ—à–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    std::string tempPasswordHash = passwordHasher_->generateSecurePasswordHash(tempPassword);
    
    Client updatedClient = *client;
    updatedClient.setPasswordHash(tempPasswordHash);
    
    if (clientRepository_->update(updatedClient)) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        std::cout << "‚úÖ AuthService::resetPassword - –ü–∞—Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω –¥–ª—è: " << email << std::endl;
        std::cout << "‚úÖ AuthService::resetPassword - –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: " << tempPassword << std::endl;
    }
}

bool AuthService::validateSession(const UUID& clientId) const {
    auto client = clientRepository_->findById(clientId);
    return client && client->isActive();
}

void AuthService::validateRegistrationData(const AuthRequestDTO& request) const {
    std::cout << "üîç AuthService::validateRegistrationData - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" << std::endl;
    
    if (request.name.empty() || request.email.empty() || request.password.empty()) {
        throw std::invalid_argument("–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ Client
    if (!Client::isValidName(request.name)) {
        std::cout << "‚ùå AuthService::validateRegistrationData - –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è: " << request.name << std::endl;
        throw std::invalid_argument("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏");
    }
    
    if (!Client::isValidEmail(request.email)) {
        std::cout << "‚ùå AuthService::validateRegistrationData - –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email: " << request.email << std::endl;
        throw std::invalid_argument("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email");
    }
    
    if (!request.phone.empty() && !Client::isValidPhone(request.phone)) {
        std::cout << "‚ùå AuthService::validateRegistrationData - –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: " << request.phone << std::endl;
        throw std::invalid_argument("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
    }
    
    if (!Client::isValidPassword(request.password)) {
        std::cout << "‚ùå AuthService::validateRegistrationData - –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å (–¥–ª–∏–Ω–∞: " << request.password.length() << ")" << std::endl;
        throw std::invalid_argument("–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏");
    }
    
    std::cout << "‚úÖ AuthService::validateRegistrationData - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã" << std::endl;
}

bool AuthService::isEmailAvailable(const std::string& email) const {
    auto client = clientRepository_->findByEmail(email);
    return !client.has_value();
}

std::string AuthService::generateSecureTemporaryPassword() const {
    const std::string chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    std::random_device rd;
    std::mt19937 generator(rd());
    std::uniform_int_distribution<> distribution(0, chars.size() - 1);
    
    std::string password;
    for (int i = 0; i < 12; ++i) {
        password += chars[distribution(generator)];
    }
    
    return password;
}