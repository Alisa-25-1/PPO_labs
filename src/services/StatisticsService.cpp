#include "StatisticsService.hpp"
#include <algorithm>
#include <iomanip>
#include <sstream>

StatisticsService::StatisticsService(
    std::shared_ptr<IAttendanceRepository> attendanceRepo,
    std::shared_ptr<IClientRepository> clientRepo,
    std::shared_ptr<ILessonRepository> lessonRepo,
    std::shared_ptr<IBookingRepository> bookingRepo,
    std::shared_ptr<IEnrollmentRepository> enrollmentRepo
) : attendanceRepo_(std::move(attendanceRepo)),
    clientRepo_(std::move(clientRepo)),
    lessonRepo_(std::move(lessonRepo)),
    bookingRepo_(std::move(bookingRepo)),
    enrollmentRepo_(std::move(enrollmentRepo)) {}

StudioStatsDTO StatisticsService::getStudioStats() {
    StudioStatsDTO stats{};
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        auto clients = clientRepo_->findAll();
        stats.totalClients = clients.size();
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–Ω—è—Ç–∏—è–º
        stats.visitedLessons = attendanceRepo_->countByTypeAndStatus(AttendanceType::LESSON, AttendanceStatus::VISITED);
        stats.cancelledLessons = attendanceRepo_->countByTypeAndStatus(AttendanceType::LESSON, AttendanceStatus::CANCELLED);
        stats.noShowLessons = attendanceRepo_->countByTypeAndStatus(AttendanceType::LESSON, AttendanceStatus::NO_SHOW);
        stats.totalLessons = stats.visitedLessons + stats.cancelledLessons + stats.noShowLessons;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º
        stats.visitedBookings = attendanceRepo_->countByTypeAndStatus(AttendanceType::BOOKING, AttendanceStatus::VISITED);
        stats.cancelledBookings = attendanceRepo_->countByTypeAndStatus(AttendanceType::BOOKING, AttendanceStatus::CANCELLED);
        stats.noShowBookings = attendanceRepo_->countByTypeAndStatus(AttendanceType::BOOKING, AttendanceStatus::NO_SHOW);
        stats.totalBookings = stats.visitedBookings + stats.cancelledBookings + stats.noShowBookings;
        
        // –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        int totalVisited = stats.visitedLessons + stats.visitedBookings;
        int totalScheduled = stats.totalLessons + stats.totalBookings;
        stats.overallAttendanceRate = calculateAttendanceRate(totalVisited, totalScheduled);
        
        // –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤
        auto topClients = attendanceRepo_->getTopClientsByVisits(5);
        for (const auto& [clientId, visits] : topClients) {
            auto client = clientRepo_->findById(clientId);
            if (client) {
                stats.topClients.emplace_back(client->getName(), visits);
            }
        }
        
    } catch (const std::exception& e) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—É–¥–∏–∏: " << e.what() << std::endl;
    }
    
    return stats;
}

ClientStatsDTO StatisticsService::getClientStats(const UUID& clientId) {
    ClientStatsDTO stats{};
    stats.clientId = clientId;
    
    try {
        auto client = clientRepo_->findById(clientId);
        if (!client) {
            throw std::runtime_error("Client not found");
        }
        stats.clientName = client->getName();
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–Ω—è—Ç–∏—è–º
        stats.visitedLessons = attendanceRepo_->countByClientAndStatus(clientId, AttendanceStatus::VISITED);
        stats.cancelledLessons = attendanceRepo_->countByClientAndStatus(clientId, AttendanceStatus::CANCELLED);
        stats.noShowLessons = attendanceRepo_->countByClientAndStatus(clientId, AttendanceStatus::NO_SHOW);
        stats.totalLessons = stats.visitedLessons + stats.cancelledLessons + stats.noShowLessons;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º
        // –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –¥—Ä—É–≥–æ–º—É —Ç–∏–ø—É
        auto clientAttendances = attendanceRepo_->findByClientId(clientId);
        for (const auto& attendance : clientAttendances) {
            if (attendance.getType() == AttendanceType::BOOKING) {
                stats.totalBookings++;
                if (attendance.isVisited()) stats.visitedBookings++;
                if (attendance.isCancelled()) stats.cancelledBookings++;
                if (attendance.isNoShow()) stats.noShowBookings++;
            }
        }
        
        // –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        stats.attendanceRate = calculateAttendanceRate(stats.visitedLessons + stats.visitedBookings, 
                                                     stats.totalLessons + stats.totalBookings);
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: " << e.what() << std::endl;
    }
    
    return stats;
}

std::vector<ClientStatsDTO> StatisticsService::getAllClientsStats() {
    std::vector<ClientStatsDTO> result;
    
    try {
        auto clients = clientRepo_->findAll();
        for (const auto& client : clients) {
            auto stats = getClientStats(client.getId());
            result.push_back(stats);
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        std::sort(result.begin(), result.end(), 
                 [](const ClientStatsDTO& a, const ClientStatsDTO& b) {
                     return a.attendanceRate > b.attendanceRate;
                 });
        
    } catch (const std::exception& e) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: " << e.what() << std::endl;
    }
    
    return result;
}

std::map<std::string, int> StatisticsService::getMonthlyStats(int year, int month) {
    std::map<std::string, int> monthlyStats;
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    monthlyStats["–ó–∞–Ω—è—Ç–∏–π –ø—Ä–æ–≤–µ–¥–µ–Ω–æ"] = 0;
    monthlyStats["–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"] = 0;
    monthlyStats["–ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"] = 0;
    monthlyStats["–û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π"] = 0;
    
    return monthlyStats;
}

bool StatisticsService::migrateExistingData() {
    try {
        std::cout << "üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö..." << std::endl;
        
        bool success = true;
        success &= migrateBookingsToAttendance();
        success &= migrateEnrollmentsToAttendance();
        
        if (success) {
            std::cout << "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" << std::endl;
        } else {
            std::cerr << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö" << std::endl;
        }
        
        return success;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: " << e.what() << std::endl;
        return false;
    }
}

bool StatisticsService::migrateBookingsToAttendance() {
    try {
        auto allBookings = bookingRepo_->findAll();
        int migrated = 0;
        
        for (const auto& booking : allBookings) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
            auto existingAttendances = attendanceRepo_->findByEntityId(booking.getId());
            bool exists = false;
            
            for (const auto& att : existingAttendances) {
                if (att.getClientId() == booking.getClientId() && 
                    att.getType() == AttendanceType::BOOKING) {
                    exists = true;
                    break;
                }
            }
            
            if (!exists) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
                UUID attendanceId = UUID::generate();
                Attendance attendance(attendanceId, booking.getClientId(), booking.getId(),
                                    AttendanceType::BOOKING, booking.getTimeSlot().getStartTime());
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                if (booking.isCancelled()) {
                    attendance.markCancelled("–ú–∏–≥—Ä–∞—Ü–∏—è: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ");
                } else if (booking.isCompleted()) {
                    attendance.markVisited("–ú–∏–≥—Ä–∞—Ü–∏—è: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ");
                }
                // –ê–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è SCHEDULED –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                attendanceRepo_->save(attendance);
                migrated++;
            }
        }
        
        std::cout << "üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: " << migrated << std::endl;
        return true;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: " << e.what() << std::endl;
        return false;
    }
}

bool StatisticsService::migrateEnrollmentsToAttendance() {
    try {
        auto allEnrollments = enrollmentRepo_->findAll();
        int migrated = 0;
        
        for (const auto& enrollment : allEnrollments) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            auto lesson = lessonRepo_->findById(enrollment.getLessonId());
            if (!lesson) continue;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            auto existingAttendances = attendanceRepo_->findByEntityId(enrollment.getLessonId());
            bool exists = false;
            
            for (const auto& att : existingAttendances) {
                if (att.getClientId() == enrollment.getClientId() && 
                    att.getType() == AttendanceType::LESSON) {
                    exists = true;
                    break;
                }
            }
            
            if (!exists) {
                UUID attendanceId = UUID::generate();
                Attendance attendance(attendanceId, enrollment.getClientId(), enrollment.getLessonId(),
                                    AttendanceType::LESSON, lesson->getStartTime());
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ enrollment
                switch (enrollment.getStatus()) {
                    case EnrollmentStatus::CANCELLED:
                        attendance.markCancelled("–ú–∏–≥—Ä–∞—Ü–∏—è: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ");
                        break;
                    case EnrollmentStatus::ATTENDED:
                        attendance.markVisited("–ú–∏–≥—Ä–∞—Ü–∏—è: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ");
                        break;
                    case EnrollmentStatus::MISSED:
                        attendance.markNoShow("–ú–∏–≥—Ä–∞—Ü–∏—è: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ");
                        break;
                    case EnrollmentStatus::REGISTERED:
                        // –ë—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è –æ—Å—Ç–∞—é—Ç—Å—è SCHEDULED
                        break;
                }
                
                attendanceRepo_->save(attendance);
                migrated++;
            }
        }
        
        std::cout << "üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è: " << migrated << std::endl;
        return true;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π: " << e.what() << std::endl;
        return false;
    }
}

double StatisticsService::calculateAttendanceRate(int visited, int total) const {
    if (total == 0) return 0.0;
    return (static_cast<double>(visited) / total) * 100.0;
}