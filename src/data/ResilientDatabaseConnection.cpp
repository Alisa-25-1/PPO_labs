#include "ResilientDatabaseConnection.hpp"
#include "../services/DatabaseHealthService.hpp"
#include <iostream>

ResilientDatabaseConnection::ResilientDatabaseConnection(const std::string& connectionString)
    : DatabaseConnection(connectionString) {
    setRetryPolicy(3, std::chrono::milliseconds(2000));
}

void ResilientDatabaseConnection::setRetryPolicy(int maxRetries, std::chrono::milliseconds retryDelay) {
    maxRetries_ = maxRetries;
    retryDelay_ = retryDelay;
}

pqxx::connection& ResilientDatabaseConnection::getConnection() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    if (!DatabaseHealthService::shouldRetryConnection()) {
        throw std::runtime_error("Database is marked as unhealthy. Please wait before retrying.");
    }
    
    for (int attempt = 1; attempt <= maxRetries_; ++attempt) {
        try {
            auto& conn = DatabaseConnection::getConnection();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            pqxx::work testWork(conn);
            testWork.exec("SELECT 1");
            testWork.commit();
            
            DatabaseHealthService::markDatabaseHealthy();
            successCount_++;
            return conn;
            
        } catch (const std::exception& e) {
            retryCount_++;
            std::cerr << "‚ö†Ô∏è Connection attempt " << attempt << "/" << maxRetries_ 
                      << " failed: " << e.what() << std::endl;
            
            if (attempt == maxRetries_) {
                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞ - –ø–æ–º–µ—á–∞–µ–º –ë–î –∫–∞–∫ –Ω–µ–∑–¥–æ—Ä–æ–≤—É—é
                DatabaseHealthService::markDatabaseUnhealthy();
                std::cerr << "üí• All connection attempts failed. Marking database as unhealthy." << std::endl;
                throw;
            } else {
                std::cout << "üîÑ Retrying in " << retryDelay_.count() << "ms..." << std::endl;
                std::this_thread::sleep_for(retryDelay_);
            }
        }
    }
    
    throw std::runtime_error("Failed to establish database connection after " + 
                           std::to_string(maxRetries_) + " attempts");
}

pqxx::work ResilientDatabaseConnection::beginTransaction() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Ä–µ—Ç—Ä–∞–µ–≤, –Ω–æ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    for (int attempt = 1; attempt <= maxRetries_; ++attempt) {
        try {
            return DatabaseConnection::beginTransaction(); 
        } catch (const std::exception& e) {
            std::cerr << "‚ö†Ô∏è Transaction attempt " << attempt << "/" << maxRetries_ 
                      << " failed: " << e.what() << std::endl;
            
            if (attempt < maxRetries_) {
                std::cout << "üîÑ Retrying transaction in " << retryDelay_.count() << "ms..." << std::endl;
                std::this_thread::sleep_for(retryDelay_);
            } else {
                DatabaseHealthService::markDatabaseUnhealthy();
                throw;
            }
        }
    }
    
    throw std::runtime_error("Failed to begin transaction after " + 
                           std::to_string(maxRetries_) + " attempts");
}

bool ResilientDatabaseConnection::executeWithRetry(const std::function<void()>& operation) {
    if (!DatabaseHealthService::shouldRetryConnection()) {
        return false;
    }
    
    for (int attempt = 1; attempt <= maxRetries_; ++attempt) {
        try {
            operation();
            DatabaseHealthService::markDatabaseHealthy();
            return true;
        } catch (const std::exception& e) {
            std::cerr << "‚ö†Ô∏è Operation attempt " << attempt << "/" << maxRetries_ 
                      << " failed: " << e.what() << std::endl;
            
            if (attempt == maxRetries_) {
                DatabaseHealthService::markDatabaseUnhealthy();
                return false;
            } else {
                std::cout << "üîÑ Retrying operation in " << retryDelay_.count() << "ms..." << std::endl;
                std::this_thread::sleep_for(retryDelay_);
            }
        }
    }
    return false;
}